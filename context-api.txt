전역적인 상태 관리

    실제 프로젝트에서는 컴포넌트의 깊이가 더욱 깊을수도있고, 
    다루게 되는 데이터들도 훨씬 많아질 수도 있어서
    상태 관리 사용없이 하면 유지보수성이 낮아질 가능성이 존재한다.

    해결책?
    
        Context API 를 통하여 글로벌 상태 관리를 편하게 할 수 있다!
        더 이상 여러 컴포넌트를 거쳐서 값을 전달해주는 것이 아니라, 
        * Context * 를 통해서 원하는 값이나 함수를 바로 쏴 줄수 있게 된다.

    즉 Context API를 사용하면 App 에서부터 아래로 props 를 전달하는 것이 아닌, 
    Context 를 통해서 바로 가져와서 사용이 가능하다.
    
Context 만들기

    const Context = createContext(); // Context 를 만듭니다.

    createContext() 라는 함수를 사용해서 만든다.
    이 함수를 호출하면 Provider 와 Consumer 라는 컴포넌트들이 반환된다.
    이 둘은 Context 를 이용하기 위해 필요한 컴포넌트들이다.

    Provider 
    
        Context 에서 사용할 값을 설정할 때 사용

    Consumer 
    
        나중에 우리가 설정한 값을 불러와야 할 때 사용

prefix 설정

    Context 는 여러개를 만들 수가 있다. 
    여러개의 Context 를 사용 할 때 이름이 겹치지 않고 쉽게 다루기 위해서 
    Provider 와 Consumer 앞에 prefix 를 설정한다

    ex) SampleProvider, SampleConsumer, 등등..

Provider 사용하기

    Context 를 프로젝트에 적용하려면, 앱을 Provider 로 감싸주어야 한다.

Consumer 사용하기

    컴포넌트에서 Context 를 사용해야 할 때에 사용된다.

Render Props 패턴

    HOC보다 더 강력한 패턴 ( ex) react-router )

    행위를 공유하기 위해 "첨가(mixing in)" 하거나 컴포넌트를 장식하는 대신에, 
    그저 상태를 공유하기 위해 사용할 수 있는 함수 prop를 이용해서 일반 컴포넌트를 렌더링하면 된다.

-------------------------------------------------------------------------------

Consumer 를 사용하여 context 값을 전달해준 컨테이너 컴포넌트

    단순히 render 에서만 필요한게 아니라, 내부에 있는 메소드에서도 필요로 한다면?
    render 에서 Consumer 를 사용하는 형태로 구현하지 않고,
    ~~~Container 라는 컨테이너 컴포넌트를 추가적으로 만들어서 props 로 필요한 값을
    전달하는 방식으로 구현한다.

render만 필요한 경우 consumer 를 사용하는 형태로 구현

-----------------------------------------------------------------------------


일반적인 리액트 어플리케이션에서는 data를 props를 이용해 top-down(부모에서 자식으로) 으로 전달합니다. 
그러나 어플리케이션 내의 많은 컴포넌트에 의해 요구되는 어떤 props의 
타입(e.g. locale preference, UI theme)에는 이 방식이 까다로울 수 있습니다. 

Context는 이러한 컴포넌트들 사이에서 트리(컴포넌트들)의 모든 레벨에 prop을 명쾌하게 전달하지 않고 
값들을 공유하는 방법을 제공합니다.

언제 Context를 사용할까요

    Context는 리액트 컴포넌트들의 tree를 위해 ‘global’로 처리해야하는 
    data(current authenticated user, theme, or preferred language)를 
    공유하기 위해 설계되었습니다.

Context 를 사용하면 중간 element들을 통해 props 를 전달하는 것을 피할 수 있음.

* 단순히 몇몇 레벨에서의 props 를 전달하는 것을 피하기 위하여 Context를 사용하지는 마세요. 
  여러 레벨의 많은 component들에서 같은 데이터에 접근해야하는 경우에만 사용

리액트 
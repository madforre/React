create React app (node.js / npm)

    npx create-react-app 프로젝트 이름 (npx는 npm 5.2+. 이상 작동)
    해당 프로젝트 경로에서 npm start

웹 CDN 관련

    * when deploying, replace "development.js" with "production.min.js"

    <script crossorigin src="https://unpkg.com/react@16/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"></script>

    * Why the crossorigin Attribute?
    
    If you serve React from a CDN, we recommend to keep the crossorigin attribute set:
    We also recommend to verify that the CDN you are using sets the 
    
        Access-Control-Allow-Origin: *

    HTTP header.
    This enables a better error handling experience in React 16 and later.

JavaScript Tips

    If you haven’t worked with JavaScript in the last few years, these three points should give you enough knowledge to feel comfortable reading the React documentation:

    1. We define variables with let and const statements. 
       For the purposes of the React documentation, you can consider them equivalent to var.

    2. We use the class keyword to define JavaScript classes. There are two things worth remembering about them. 
       Firstly, unlike with objects, you don't need to put commas between class method definitions. 
       Secondly, unlike many other languages with classes, in JavaScript the value of this in a method depends on how it is called.

    3. We sometimes use => to define "arrow functions". They're like regular functions, but shorter. 
       For example, x => x * 2 is roughly equivalent to function(x) { return x * 2; }.
       Importantly, arrow functions don't have their own this value so they're handy when you want to preserve the this value from an outer method definition.

       Don't worry if this is too much to take in at once. The MDN JavaScript Reference is a stellar resource, and you can consult it whenever you get confused by something.

Ready to deploy to production

    running npm run build will create an optimized build of your app in the build folder.

Next.js

    Next.js is a popular and lightweight framework for static and server‑rendered applications built with React. 
    It includes styling and routing solutions out of the box, and assumes that you’re using Node.js as the server environment.

Gatsby

    Gatsby is the best way to create static websites with React. 
    It lets you use React components, but outputs pre-rendered HTML and CSS to guarantee the fastest load time.

--------------------------------------------------------------------------------------------------------------------------

Creating a Toolchain from Scratch

    A JavaScript build toolchain typically consists of:

        A package manager, such as Yarn or npm. It lets you take advantage of a vast
        ecosystem of third-party packages, and easily install or update them.

        A bundler, such as webpack or Parcel. It lets you write modular code and bundle 
        it together into small packages to optimize load time.

        A compiler such as Babel. It lets you write modern JavaScript code that still works
        in older browsers.

    If you prefer to set up your own JavaScript toolchain from scratch,
    check out this guide that re-creates some of the Create React App functionality.

    https://blog.usejournal.com/creating-a-react-app-from-scratch-f3c693b84658

    Don't forget to ensure your custom toolchain is correctly set up for production.

--------------------------------------------------------------------------------------------------------------------------

리액트에서 컴포넌트를 만드는 방법

    1. 클래스를 통해서 만드는 것. 

        클래스형태로 만들어진 컴포넌트에는 꼭, render 함수가 있어야 하고, 
        그리고 그 내부에서는 JSX 를 return 해주어야 합니다.

    2. 또 다른 방법은 함수를 통하여 컴포넌트를 만드는 것.

브라우저 상에 리액트 컴포넌트를 보여주기

    브라우저 상에 우리의 리액트 컴포넌트를 보여주기 위해서는 ReactDOM.render 함수를 사용한다.
    첫번째 파라미터는 렌더링 할 결과물이고, 두번째 파라미터는 컴포넌트를 어떤 DOM 에 그릴지 정해준다
    id 가 root 인 DOM 을 찾아서 그리도록 설정이 되어 있으며
    해당 DOM 은 public/index.html 파일에서 찾을 수 있다.

* 리액트 개발을 쉽게 하기 위해서, HTML 과 비슷한 문법으로 작성을 하면 이를 React.createElement 를 
  사용하는 자바스크립트 형태로 변환시켜줍니다. XML 형태의 코드를, 자바스크립트로 변환해야 하기 때문에, 
  JSX를 제대로 사용하기 위해서 우리는 몇가지 규칙을 준수해줘야 합니다. 

    꼭 닫혀야 하는 태그
        
        - 태그는 꼭 닫혀있어야 합니다.

    감싸져 있는 엘리먼트

        - 두개 이상의 엘리먼트는 무조건 하나의 엘리먼트로 감싸져있어야 합니다.
          (일부로 감싸는게 마음에 들지 않는다면 Fragment를 이용하여 감싸준다.)

        ex ) class App extends Component {
                render() {
                    return (
                        <Fragment>
                            <div>
                                Hello
                            </div>
                            <div>
                                Bye
                            </div>
                        </Fragment>
                    );
                }
            }
    
    JSX 안에 자바스크립트 값 사용하기

        - JSX 내부에서 자바스크립트 값을 사용하려면 아래 예제처럼 한다.

            ex)   render() {
                    const name = 'react';
                    return (
                        <div>
                            hello {name}!
                        </div>
                    );

            * ES6 에서는 var 을 쓸 일이 없음.
            값을 선언 후 바꿔야 할 땐 let, 바꾸지 않을 땐 const 를 사용

    조건부 렌더링

        - JSX 내부에서 조건부 렌더링을 할 때는 보통 삼항 연산자를 사용하거나, AND 연산자를 사용한다.
        반면에 if 문을 사용 할 수는 없다. (사용하려면 IIFE(즉시 실행 함수 표현) 을 사용한다.)

        복잡한 조건들은 웬만하면 JSX 밖에서 로직을 작성하는 것이 좋다.
        하지만 꼭 JSX 내부에서 작성해야 한다면, IIFE를 사용한다.
            
            (function() {})() - 일반 IIFE
            (() => {})() - 호살표 함수를 사용한 IIFE

    style 과 className

        - 리액트에서는 class 대신 className을 사용한다.

    주석

        - {/* 주석은 이렇게 */}
        - 또는 태그 사이에 // 넣기
            ex)
                <h1
                // 태그 사이에
                >리액트</h1>

props 와 state

    리액트 컴포넌트에서 다루는 데이터는 두개로 나뉩니다. 
    바로 props 와 state 인데요, props 는 부모 컴포넌트가 자식 컴포넌트에게 주는 값입니다. 
    자식 컴포넌트에서는 props 를 받아오기만하고, 받아온 props를 직접 수정 할 수 는 없습니다.

    반면에 state 는 컴포넌트 내부에서 선언하며 내부에서 값을 변경 할 수 있습니다. (동적인 데이터 다룸)

defaultProps - props의 기본 값을 설정 ( 특정 상황에 props를 일부로 비울 때 )

함수형 컴포넌트

    단순히 props만 받아와서 보여주기만 하는 컴포넌트의 경우엔 더 간편한 문법으로 작성이 가능하다.
    함수형태로 작성하면 된다.

    함수형 컴포넌트와 클래스형 컴포넌트의 주요 차이점은, 
    우리가 조만간 배우게 될 state 와 LifeCycle 이 빠져있다는 점입니다. 
    그래서, 컴포넌트 초기 마운트가 아주 미세하게 빠르고, 메모리 자원을 덜 사용합니다. 
    미세한 차이이니, 컴포넌트를 무수히 많이 렌더링 하게 되는게 아니라면 
    성능적으로 큰 차이는 없습니다.

state

    동적인 데이터를 다룰 땐 어떻게? - state를 사용한다!

    * state를 정의할 때는 class fields 문법을 사용해서 정의한다.
      class fields 를 사용하는건 편의를 위함이다.
      (arrow function으로 정의하도록 하자.)

setState

    this.setState ?
    state에 있는 값을 바꾸기 위해서는 this.setState를 무조건 거쳐야 한다.
    리액트에서는, 이 함수가 호출되면 컴포넌트가 리렌더링 되도록 설계되어 있다.

    setState는 객체로 전달되는 값만 업데이트를 해준다.
    state에 두 개의 키가 있다고 가정할 때, 하나의 키를 this.setState에서 바꿔주면
    바꿔준 하나의 키의 값만 업데이트된다.

    setState는 객체의 깊숙한 곳까지 확인하지는 못합니다.
    객체안의 객체의 키 값을 업데이트한다면 객체안의 객체 그 자체가 바뀌게 됩니다.

        this.setState({
            number: 0,
            foo: {
                ...this.state.foo,
                foobar: 2
            }
        });

    이 때 전개연산자를 사용합니다.

    * ES6 전개 연산자 (Spread Operator)
    
        ...
        
        - 하나의 배열을 다른 배열의 아무 곳에나 추가할 수 있음

          기존

            // joining arrays
            const odd = [1, 3, 5];
            const nums = [2, 4, 6].concat(odd);

            // cloning arrays
            const arr = [1, 2, 3, 4];
            const arr2 = arr.slice()

          축약기법

            * concat() 함수와는 다르게 전개 연산자를 이용하면 
              하나의 배열을 다른 배열의 아무 곳에나 추가할 수 있음

            // joining arrays
            const odd = [1, 3, 5];
            const nums = [2, ...odd, 4, 6];
            console.log(nums); // [2, 1, 3, 5, 4, 6]

            - 배열 복사

            // cloning arrays
            const arr = [1, 2, 3, 4];
            const arr2 = [...arr];
        
        - ES6의 구조화 대입법(destructuring notation)와 함께 사용 가능

            const { a, b, ...z } = { a: 1, b: 2, c: 3, d: 4 };
            console.log(a) // 1
            console.log(b) // 2
            console.log(z) // { c: 3, d: 4 }

    이러한 전개연산자 작업이 꽤나 귀찮으므로, 나중에는 immutable.js 혹은
    immer.js 를 사용하여 이 작업을 좀더 간단히 할 수 있습니다.

setState에 객체 대신 함수를 전달하기

    setState 함수에 인자를 object로 줄 경우 setState는 비동기로 작동한다.

    * 비동기로 작동한다는 것은 순서를 보장하지 못하고 순서가 중요한 로직일 경우 
      예측되지 않은 결과를 초래할 수 있다.

      비동기로 작동한다는 것은 순서를 보장하지 못하고 순서가 중요한 로직일 경우 예측되지 않은 결과를 초래할 수 있다.

        setState({count: this.state.count+1});
        setState({count: this.state.count+1});
        setState({count: this.state.count+1});

      한 함수안에서 위의 코드가 실행되면 +3을 기대하게 되지만 실제로는 +1 된다.
      내부적으로 한꺼번에 처리하기 때문에 +3이 +1 되는 경우가 생길 수 있다.

      하지만 함수형으로 실행할 경우

        setState((state, props)=>({count: state.count+1}));
        setState((state, props)=>({count: state.count+1}));

        실행 큐에 적재되어 차례차례 실행된다.

        함수형 프로그래밍은 많은 점에서 장점이 있다.
        테스트가 쉽고 선언적이라 직관적이고 재사용도 용이하다.
        간단한 상태 변화라도 여러면에서 함수형으로 작성하는 편이 더 유용할 것이다.

        출처: http://tbang.tistory.com/185 [heene]

setState의 메소드 동작 방식

    - 업데이트 할 상태(state)의 부분을 포함하는 객체를 setState 인자로 전달한다. 
      다시 말하면, 전달한 객체에는 컴포넌트 상태(state)의 키에 해당하는 키가 있고 
      setState()는 그 객체를 상태(state)에 머지(merge)하여 상태(state)를 
      업데이트하거나 새로 설정한다. 말그대로, "상태를 셋 한다(set-state)".

      setState에 업데이트할 객체를 전달한다.

      Because of the amount of work involved, 
      calling setState() might not immediately update your state.

      React may batch multiple setState() calls into a single update for performance.

    * Functional setState to the rescue! (The best-kept React secret)


ES6 지식 추가 보충

    ES6에서는 extends 키워드로 상속을 구현합니다.

    super 키워드

        서브 클래스와 슈퍼 클래스에 같은 이름의 메서드가 존재하면 슈퍼 클래스의
        메서드는 호출되지 않습니다. (오버라이딩 되었다고 생각하자.)

        이때 super 키워드를 사용해서 슈퍼 클래스의 메서드를 호출할 수 있습니다. 
        (서브 클래스의 constructor에 super()를 작성하면 슈퍼 클래스의 constructor가 호출됩니다.)

    static 키워드
    
        static 키워드는 클래스를 위한 정적(static) 메소드를 정의합니다. 
        정적 메소드는 prototype에 연결되지 않고 클래스에 직접 연결되기 때문에 
        클래스의 인스턴스화(instantiating) 없이 호출되며, 
        클래스의 인스턴스에서는 호출할 수 없습니다. 

        동일한 클래스 내의 다른 정적 메서드 내에서 정적 메서드를 호출하는 경우 
        키워드 this를 사용할 수 있음.

ubuntu npm start 에러 (나중에 다시 실행할 때 ENO)

    There is the limit in the number of files that can be watched in a system. 
    We have to increase this number. The below command can be used to increase this number.

    echo fs.inotify.max_user_watches=582222 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

클래스 필드 (Class Field)

    클래스 블록 안에서 할당 연산자(=)를 이용해 인스턴스 속성을 지정할 수 있는 문법을 클래스 필드(class field)라고 합니다.

ES6의 화살표 함수

    화살표 함수(arrow function)는 ES6 문법에서 함수를 표현하는 새로운 방식입니다.
    그렇다고 해서 기존 function을 이용한 함수 선언 방식을 아예 대체하지는 않습니다.
    사용 용도가 조금 다릅니다. 이 문법은 주로 함수를 파라미터로 전달할 때 유용합니다.

    * 이 문법이 기존 function을 대체할 수 없는 것은 용도가 다르기 때문입니다.

      ex) 
            function BlackDog() {
                this.name = '흰둥이';
                return {
                    name: '검둥이',
                    bark: function() {
                        console.log(this.name+': 멍멍!');
                    }
                }
            }

            const blackDog = new BlackDog();
            blackDog.bark(); // 검둥이: 멍멍!

            function WhiteDog() {
                this.name = '흰둥이';
                return {
                    name: '검둥이',
                    bark:() => {
                        console.log(this.name +': 멍멍!');
                    }
                }
            }

            const whiteDog = newWhiteDog();
            whiteDog.bark(); // 흰둥이: 멍멍!

        - function()을 사용했을 때는 검둥이가 나타나고, () => 를
          사용했을 때는 흰둥이가 나타납니다. 

          * 일반 함수는 자신의 종속된 객체를 this를 가리키며, 
            화살표 함수는 자신이 종속된 인스턴스를 가리킵니다.
            화살표 함수는 값을 연산하여 바로 반환해야 할 때 사용하면 
            가독성이 높습니다.
          
        function twice(value) {
            return value * 2;
        }

        const triple = (value) => value * 3;

         - 위 코드처럼 이렇게 따로 {}를 열어 주지 않으면 연산한 값을 그대로
           반환한다는 의미입니다.

ES6 리터럴?

    변수 및 상수에 저장되는 '값 자체' 를 일컫는 말.
    코드 상에서 데이터를 표현하는 방식을 리터럴이라고 한다.
    일반적으로 객체 중심 혹은 객체 지향 언어에서는 객체의 리터럴 표기법을
    지원하게 된다.
    리터럴 표기법이란, 변수를 선언함과 동시에 그 값을 지정해주는 표기법을 말한다.

    ex) var no = 3;
        var obj= {name:'kk', age:"59"};

    리터럴 표기법은 비 정규적인 방법이 아니다.
    성능 저하를 불러오지도 않으며, 코드는 더 짧다.
    코드가 짧으니 자바스크립트 인터프리터의 해석분량도 줄어들어 더 빨라진다.

ES6 비구조화 할당 destructuring assignment (구조 분해)

    배열 비구조화(분해)

        let [a, b] = [3, 4]; // a = 3, b = 4 를 대입
        console.log(`${a}, ${b}`);  //  "3, 4"

        [a, b] = [b, a]; // a = b, b = a를 대입(교환)
        console.log(`${a}, ${b}`); // "4, 3"

    객체 비구조화(분해)

        let book = {
            title : 'HTML',
            price : 23000
        };

        let {title, price} = book; // book객체의 속성을 개별적으로 좌측의 변수에 전달
        console.log(`${title}, ${price}`); // "HTML, 23000"


        * 여기서 중요한 건 변수명과 객체 속성의 이름이 같아야한다는 것이다. 
            그러나 다르게도 할 수는 있다.

        let book = {
            title : 'HTML',
            price : 23000
        };

        let {title: newTitle, price: newPrice} = book;
        console.log(`${newTitle}, ${newPrice}`;

    * 선언 없이 객체 리터럴 비구조화 할당할 때는 ()로 할당문을 둘러싼다.

        ex) this.setState(
                ({ number }) => ({
                number: number - 1
                })
            );

    탬플릿 문자열

        const a = "takeU"; 
        const b = 24;

        console.log(`Hello ${a} I'm ${b} year's old`)

        // ${}안에 변수넣는 방법으로 ``사이에 함께 넣어 사용


setState에 객체 대신 함수 전달하기

    - 추후 다시 볼것

이벤트 설정

    * 리액트에서 이벤트 함수를 설정할 때는 camelCase로 설정해야 한다.

        ex) onclick은 onClick, onmousedown은 onMouseDown, onchange는 onChange...

    * 이벤트에 전달하는 값은 함수여야 한다.
      함수를 전달하되, 호출해서는 안된다.
    
        ex) onClick={this.handleIncrease()} 이래버리면
            렌더링을 할 때마다 해당 함수가 호출된다.
            렌더링 -> 함수 호출 -> setState -> 함수호출 -> 무한 
            
    렌더링 함수에서 이벤트를 설정 할 때 여러분이 만든 메소드를 호출하지 마세요!

React LifeCycle API

    컴포넌트 초기 생성

    - constructor

        constructor(props) {
            super(props);
        }

        이 부분은 생성자 함수이다. 컴포넌트가 새로 만들어질 때마다 호출된다.

    - componentDidMount

        componentDidMount() {
            // 외부 라이브러리 연동: D3, masonry, etc
            // 컴포넌트에서 필요한 데이터 요청: Ajax, GraphQL, etc
            // DOM 에 관련된 작업: 스크롤 설정, 크기 읽어오기 등
        }

        이 API는 컴포넌트가 화면에 나타나게 되었을 때 호출된다. 주로 D3, masonry 처럼 DOM을 사용해야 하는
        외부 라이브러리를 연동을 하거나, 해당 컴포넌트에서 필요로 하는 데이터를 요청하기 위해 axios, fetch 등을 통하여
        ajax 요청을 하거나, DOM의 속성을 읽거나 변경하는 작업등을 한다.

    컴포넌트 업데이트

     * 컴포넌트 업데이트는 props의 변화, 그리고 state의 변화에 따라 결정된다. 되기 전과 되기 후 시점과 관련된 API들이 있다.

    - static getDerivedStateFromProps

        static getDerivedStateFromProps(nextProps, prevState) {
            // 여기서는 setState 를 하는 것이 아니라
            // 특정 props 가 바뀔 때 설정하고 싶은 state 값을 리턴하는 형태로
            // 사용됩니다.
            /*
            if (nextProps.value !== prevState.value {
                return { value: nextProps.value };
            }
            return null; // null 을 리턴하면 따로 업데이트 할 것은 없다라는 의미
        }

        이 함수(API)는 props 로 받아온 값을 state 로 동기화하는 작업을 해줘야 하는 경우에 사용

    - shouldComponentUpdate

        shouldComponentUpdate(nextProps, nextState) {
            // return false 하면 업데이트를 안함
            // return this.props.checked !== nextProps.checked
            return true;
        }

        이 API는 컴포넌트를 최적화하는 작업에서 매우 유용하게 사용된다.
        리액트에서는 변화가 발생하는 부분만 업데이트를 해줘서 성능이 꽤 잘나온다.
        하지만 변화가 발생한 부분만 감지해내기 위해서는 Virtual DOM 에 한번 그려줘야 한다.

        즉, 현재 컴포넌트의 상태가 업데이트되지 않아도, 부모 컴포넌트가 리렌더링되면,
        자식 컴포넌트들도 렌더링된다. 여기서 "렌더링" 된다는건, render() 함수가 호출된다는
        의미이다.

        변화가 없으면 물론 DOM 조작은 하지 않는다. 그저 Virtual DOM 에만 렌더링 할 뿐이다.
        부하가 많은 작업은 아니지만, 컴포넌트가 무수히 많이 렌더링 된다면 이야기가 조금 달라진다.
        CPU 자원이 어느정도 사용되기 때문.

        쓸데없이 낭비되고 있는 이 CPU 처리량을 줄여주기 위해서는 Virtual DOM에 리렌더링 되는
        불필요한 경우를 방지하기 위해 shouldComponentUpdate 를 작성한다.

        이 함수는 기본적으로 true를 반환하나, 따로 작성을 해주어서 조건에 따라 false 를
        반환하면 해당 조건에는 render 함수를 호출하지 않게된다.

    - getSnapshotBeforeUpdate

        이 API가 발생하는 시점은 다음과 같다.

        1. render()
        2. getSnapshotBeforeUpdate() - 여기서 발생
        3. 실제 DOM에 변화 발생
        4. componentDidUpdate

        이 API를 통해서, DOM 변화가 일어나기 직전의 상태를 가져온다.
        여기서 리턴하는 값은 componentDidUpdate 에서 3번째 파라미터로 받아올 수 있게
        된다.

        예시 코드 ---------------------------------------

         getSnapshotBeforeUpdate(prevProps, prevState) {
            // DOM 업데이트가 일어나기 직전의 시점입니다.
            // 새 데이터가 상단에 추가되어도 스크롤바를 유지해보겠습니다.
            // scrollHeight 는 전 후를 비교해서 스크롤 위치를 설정하기 위함이고,
            // scrollTop 은, 이 기능이 크롬에 이미 구현이 되어있는데, 
            // 이미 구현이 되어있다면 처리하지 않도록 하기 위함입니다.
            if (prevState.array !== this.state.array) {
                const {
                    scrollTop, scrollHeight
                } = this.list;

                // 여기서 반환 하는 값은 componentDidMount 에서 snapshot 값으로 받아올 수 있습니다.
                return {
                    scrollTop, scrollHeight
                };
            }
        }

        componentDidUpdate(prevProps, prevState, snapshot) {
            if (snapshot) {
                const { scrollTop } = this.list;
            if (scrollTop !== snapshot.scrollTop) return; // 기능이 이미 구현되어있다면 처리하지 않습니다.
            const diff = this.list.scrollHeight - snapshot.scrollHeight;
            this.list.scrollTop += diff;
            }
        }

        예시 코드 끝 ---------------------------------------

    - componentDidUpdate

        componentDidUpdate(prevProps, prevState, snapshot) {

        }

        이 API는 컴포넌트에서 render()를 호출하고 난 다음에 발생하게 됩니다.
        이 시점에선 this.props 와 this.state 가 바뀌어 있습니다.
        또한 파라미터를 통해 이전의 값인 prevProps 와 prevState 를 조회 할 수
        있습니다. 

        getSnapshotBeforeUpdate 에서 반환한 snapshot 값은 세번째 파라미터로 
        받아옵니다.

    컴포넌트 제거

        컴포넌트가 더 이상 필요하지 않게 되면 단 하나의 API가 호출됨.

    - componentWillUnmount

        componentWillUnmount() {
            // 이벤트, setTimeout, 외부 라이브러리 인스턴스 제거
        }

        여기서는 주로 등록했었던 이벤트를 제거하고, 만약에 setTimeout 을 걸은 것이
        있다면 clearTimeout 을 통하여 제거를 합니다.

        추가적으로 외부 라이브러리를 사용한게 있고 해당 라이브러리에 dispose 기능이
        있다면 여기서 호출하면 된다.(삭제패턴)

    컴포넌트에 에러 발생

        render 함수에서 에러가 발생한다면, 리액트 앱이 크래쉬 되어버립니다.
        그러한 상황에 유용하게 사용할 수 있는 API가 한가지 있음.

    - componentDidCatch

        componentDidCatch(error, info) {
            this.setState({
                error: true
            });
        }

        에러가 발생하면 componentDidCatch가 실행되게 하고,
        state.error 를 true로 설정하여 render 함수쪽에서 이에 따라
        에러를 띄운다.

        이 API 사용시 주의점?

            컴포넌트 자신의 render 함수에서 에러가 발생하는 것은 잡을 수 없음.
            대신 자식 컴포넌트 내부에서 발생하는 에러들을 잡아낸다.

        * 렌더링 부분에서 오류가발생하는 것은 사전에 방지해주어야 한다.

            1. 존재하지 않는 함수를 호출하려고 할 때 (props로 받은줄 알았던 함수가 전달이 안됐을 때.)

            2. 배열이나 객체가 올 줄 알았는데, 해당 객체나 배열이 존재하지 않을 때.

                this.props.object.value; // object is undefined
                this.props.array.length; // array is undefined

          이러한 것들은 render 함수에서 다음과 같은 형식으로 막아 줄 수 있다.

          render() {
            if (!this.props.object || !this.props.array || this.props.array.length ===0) return null;
            // object 나 array 를 사용하는 코드
          }

          혹은, 우리가 이전에 배웠었던 컴포넌트의 기본값을 설정하는 defaultProps를 통해서 설정하면 된다.
    
            class Sample extends Component {
                static defaultProps = {
                    onIncrement: () => console.warn('onIncrement is not defined'),
                    object: {},
                    array: []
                }
            }

        하지만 이걸로도 놓쳐버린 버그들은 componentDidCatch 를 통해서 잡아주고,
        필요시엔 에러의 세부내용을 서버쪽에 기록하게해서 조사한다.

    리액트 컴포넌트가 사용될 때 각 상황에 따라 호출되는 LifeCycle API 에 대해 숙지한다면
    여러 상황에 유용하게 쓸 수 있다.

Computed Property Names

    In ES6, you can use shorthand computed property names.

        var fruit_var = 'fruit'
        var eatables = {[fruit_var]: 'Apple', vegetable: 'Carrot'}
        console.log(eatables) // {fruit: 'Apple', vegetable: 'Carrot'}

    Not only that, you can even do javascript computations using computed property names

        var eatables = {[fruit_var]: 'Apple', [fruit_var + ' Cake']: 'yummy' }
        console.log(eatables) // {fruit: 'Apple', fruit Cake: 'yummy'}


    * 즉 변수 값을 키로 쓸 수 있습니다

        var sName = 'happy'
        [ sName ] : value ==> happy : value

부모 컴포넌트에게 정보 전달하기

    자식 컴포넌트의 state 안에 있는 값들을 부모 컴포넌트에게 전달하려면
    부모 컴포넌트에서 메소드를 만들고, 이 메소드를 자식에게 전달한 다음에
    자식 내부에서 호출하는 방식을 사용한다.

리액트 배열 다루기

    리액트에서는 배열을 다룰 때 평상시에 하던 것처럼 하면 안된다.
    리액트에서는 state 내부의 값을 직접적으로 수정하면 절대로 안된다.
    이를 불변성 유지라고 하는데, push, splice, unshift, pop같은 내장함수는
    배열 자체를 직접 수정하게 되므로 리액트와는 적합하지 않다.

    그 대신에, 기존의 배열에 기반하여 새 배열을 만들어내는 함수인 concat, slice,
    map, filter 같은 함수를 사용해야 한다.

    * React에서는 불변성 유지가 중요하다. 불변셩 유지를 해줘야 리액트에서 모든것들이
      필요한 상황에 리렌더링 되도록 설계할 수 있고, 그렇게해야 나중에 성능도 최적화 된다.


    데이터 추가

        나중에 가면 상태를 컴포넌트에서 분리하여 따로 관리한다.
        일단 리액트 기초에 집중하자면, App 컴포넌트에서 상태를 관리하도록 하자.

    데이터 렌더링

        리액트를 다루는건 자바스크립트를 사용하는거랑 매우 비슷하다.
        컴포넌트를 여러개 렌더링 하기 위해서는, 앵귤러 나 뷰 처럼 디렉티브 같은걸
        사용 할 필요 없이, 자바스크립트 배열의 내장함수인 map을 사용하면 된다.

        * Array.prototype.map()

            map() 메서드는 배열 내의 모든 요소 각각에 대하여 주어진 함수를 호출한
            결과를 모아 새로운 배열을 반환한다.

            var array1 = [1, 4, 9, 16];

            // pass a function to map
            const map1 = array1.map(x => x * 2);
    
            console.log(map1);
            // expected output: Array [2, 8, 18, 32]

    컴포넌트 만들기

        key 는 리액트에서 배열을 렌더링을 할 때 꼭 필요한 값입니다.
        리액트는 배열을 렌더링 할 때 값을 통하여 업데이트 성능을 최척화 합니다.

        * key 값 안정해놓으면 중간에 값이 들어가면 index 도 전부 다 바뀌기 때문.
          우리가 데이터를 추가 할 때마다 고정적인 고유 값을 부여해주면, 
          리액트가 변화를 감지해내고 업데이트를 하게 될 떄 조금 더 똑똑하게 처리 할 수 있게된다.

        * key 값은 언제나 고유해야 합니다. (고정된 고유값이어야 한다.)

        * Array.prototype.concat()

            concat() 메서드는 인자로 주어진 배열이나 값들을 기존 배열에 합쳐서 새 배열을
            반환합니다.

            var array1 = ['a', 'b', 'c'];
            var array2 = ['d', 'e', 'f'];

            console.log(array1.concat(array2));
            // expected output: Array ["a", "b", "c", "d", "e", "f"]


          구문

            var new_array = old_array.concat([...values])

            values- 새 배열로 합쳐질 배열 또는 값.

            반환 값은 새로운 Array 객체이다.

        꼭 기억해야 할 점은 배열을 렌더링 하게 될 때에는 꼭 고유값을 key 로 사용해야 한다는 것.
        그리고, 불변성 유지를 위하여 데이터를 조작 할 때에는 기존의 배열을 건들이지 않는 방식으로 해야 한다.

    데이터 제거

        우선 알아야 할 메서드
        Array.prototype.slice()

            slice 메서드는 어떤 배열의 begin 부터 end까지(end 미포함)에 대한 얕은 복사본을
            새로운 배열 객체로 반환한다. 이 때 원본 배열은 수정되지 않는다.

            ex) 

                var animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];

                console.log(animals.slice(2));
                // expected output: Array ["camel", "duck", "elephant"]
                // end가 생략되면 slice는 배열의 끝까지(arr.length) 추출한다.

                console.log(animals.slice(2, 4));
                // expected output: Array ["camel", "duck"]

                console.log(animals.slice(1, 5));
                // expected output: Array ["bison", "camel", "duck", "elephant"]

        기존의 배열 데이터를 건드리지 않으면서 데이터를 제거하기 위한 여러가지 방법이 있다.

        ex)

            const arr = [1,2,3,4,5];

            배열에서 3을 제거할 것이다.
            기존의 배열은 그대로 유지하고 새 배열을 만들어서 3을 제외시킨다.

            * slice와 concat을 이용한 방법

                array.slice(0,2).concat(array.slice(3,5)) // [1,2,4,5]

              배열 전개 연산자를 사용하면 다음과 같이 구현도 가능하다. (배열 복사)

                [ ...array.slice(0,2), ...array.slice(3,5) ];

            위 방법 보다 훨씬 더 간단한 방법?
            단순히 값이 3인 것을 없애면 된다.
            배열에는 filter 라는 내장함수가 있는데, 이 함수는 특정 조건에 부합되는 원소들만
            뽑아내서 새 배열을 만들어준다.
            따라서, 3이 제외된 배열을 만들기 위해서 아래 코드를 작성하면 된다.

            * filter를 이용한 방법

                array.filter(num => num !== 3); // [1, 2, 4, 5]

              이렇게 하면, 3이 아닌 것들만 필터링을 해서 새 배열을 보여주게 된다.

        *** 이해안되는 부분 -> PhoneInfoList.js 에서 map 함수 사용시 / 추후 다시 확인할 것

    데이터 수정

        수정할 때도 마찬가지로 불변성을 지켜줘야 한다.
        기존의 배열과, 그리고 그 내부에 있는 객체를 절대로 직접적으로 수정해서는 안된다.

            ex) 

                const array = [
                    { id: 0, text: 'hello', tag: 'a' },
                    { id: 1, text: 'world', tag: 'b' },
                    { id: 2, text: 'bye', tag: 'c'}
                ];

                기존의 값을 건드리지 않고 id가 1인 객체의 text 값을 'Korea' 라는 값으로
                바꾼 새로운 배열을 만들어보자.

                const modifiedArray = array.map(item => item.id === 1 
                ? ({ ...item,. text: 'Korea' })
                : item

                id가 일치하면 새 객체를 만들고, 기존의 내용을 집어넣고 원하는 값 덮어쓰기
                바꿀 필요 없는 것들은 그냥 기존값 사용한다.

            * 데이터를 업데이트 하는 과정에서는 불변성을 꼭 지켜야 한다!

    데이터 필터링 구현하기

        불변성의 중요성을 알아보기 위해 필터링을 구현해보자.

        * 컴포넌트의 상태가 업데이트 되면, 컴포넌트의 리렌더링이 발생하게 되고, 
          컴포넌트가 리렌더링되면 그 컴포넌트의 자식 컴포넌트도 리렌더링됩니다.

        * Virtual DOM 에 렌더링 하는 자원은 아낄 수 있으면 아끼는게 좋다.
          낭비되는 자원을 아끼기 위해선 shouldComponentUpdate LifeCycle API를 사용하면 된다.

            아래는 참고 예시 코드이다.

            shouldComponentUpdate(nextProps, nextState) {
                let shouldUpdate = this.props.status !== nextProps.status;
                return shouldUpdate;
            }

            불변성을 지켰다면 이러한 자원 절약이 가능하게 된다!
            배열을 직접 건드려서 수정하면 안된다!

            배열을 직접 건드린다면?

                직접 건드려서 수정

                const array = [1,2,3,4];
                const sameArray = array;
                sameArray.push(5);

                console.log(array !== sameArray); // false

                기존에 있던 배열이 복사되는 것이 아니라 똑같은 배열을 가리키는
                레퍼런스가 하나 만들어진 것이기 떄문에, array와 sameArray는
                서로 다른 게 아닌 같은 것이다. 또한 달라지지 않는다.

            불변성을 유지한다면?

                const array2 = [1,2,3,4];
                const differentArray = [...array2, 5];
                    // 혹은 = array2.concat(5)
                console.log(array2 === differentArray); // false

                기존에 있던 배열을 토대로 ES6 spread operator 문법을 사용하여
                기존의 배열의 값들을 포함하는 새로운 배열이 만들어졌다.

            * 객체 또한 불변성을 유지해주어야 한다.
              바로바로 비교하려면 객체를 직접 수정하는 것이 아닌,
              새로운 객체를 형성하여 불변성을 유지하며 작업하여야 한다.

    자바스크립트 indexOf()
    
        "문자열 또는 배열".indexOf("찾을 값","검색을 시작할 색인")

        문자열 또는 배열에서 찾을 수 있는 첫 번째 인덱스를 반환하고
        존재하지 않으면 -1을 반환한다.

    자바스크립트 filter()
    Array.prototype.filter()

        filter 함수는 callback이 true로 강제하는 값을 반환하는 모든 값이 있는 새로운 배열을 생성한다.

    최적화

        새 데이터가 나타났을 때는 사실상 맨 마지막 데이터만 새로 랜더링해주면 된다.
        실제로 바뀌지 않는 컴포넌트들은 DOM 변화가 일어나지는 않겠지만,
        Virtual DOM 에 그리는 자원도 아껴주기 위해서 우리는
        ShouldComponentUpdate 를 통하여 최적화 해줄 수 있다.

리액트 요약

    1. 재사용 가능한 컴포넌트를 만든다.
    2. props 는 부모에게서 전달받는 값이다.
    3. state 는 자기 자신이 지니고 있는 데이터이다.
    4. props 나 state 가 바뀌면 컴포넌트는 리렌더링 한다.
    5. LifeCycle API를 통해서 컴포넌트 마운트, 업데이트, 언마운트 전후로 처리 할 로직을
       설정하거나 리렌더링을 막아줄 수 있다.

KJY 프레임워크 이해를 위한 심화 학습 필요한 부분

    * 스타일링 - Sass Scss
    * 상태 관리 - Context API
    * 불변성 유지 - 라이브러리(Immutable.js, Immer) 에 의존하지 않고 실력 향상을 위해 직접 구현할 것
    * 라우팅 - react-router
    ? 테스팅 - Jest, Enzyme - 테스팅까지는 아직 학습할 단계가 아닌 듯
    ? 타입 시스템 - TypeScript - 사용 안함
    * Hoc - 컴포넌트 로직을 재사용 하기 위한 고급 기술
    * 토이 프로젝트 진행

함수형 컴포넌트

    파라미터로 받게 되는 것은 props 이다. 이를 비구조화 할당하여 사용한다.
    state 와 라이프사이클 API 가 빠져있지만 속도가 클래스형 컴포넌트보다 미세하게 좀 더 빠르다.

Template 컴포넌트

    리액트에서 필요한 요구사항은 아니지만 개발하기에 편하다!
    여러 종류의 JSX 를 props 로 넣어주려면 아래 예시와 같은 방법이 매우 편하다!

    ex)
        <TodoListTemplate form={<div>이렇게 말이죠.</div>}>
            <div>여기엔 children 자리구요.</div>
        </TodoListTemplate>

리액트 컴포넌트 구현 흐름

    컴포넌트 생김새 정의 ( 컴포넌트 DOM 태그 작성 + CSS 스타일 작성 ) -> 상태 관리 및 props 로 필요한 값 전달

    * ‘리스트’ 를 렌더링하게 될 때는, 특히 보여주는 리스트가 동적인 경우에는 함수형이 아닌 
       클래스형 컴포넌트로 작성한다. 그 이유는, 클래스형 컴포넌트로 작성해야 
       나중에 컴포넌트 성능 최적화를 할 수 있기 때문이다.

CSS 선택자

    E+F	
        E 요소를 뒤따르는 F 요소를 선택합니다.
        (E와 F 사이에 다른 요소가 존재하면 선택하지 않습니다.)

    E~F	
        E 요소가 앞에 존재하면 F를 선택합니다.
        (E가 F보다 먼저 등장하지 않으면 선택하지 않습니다.)

상태관리하기

    다른 컴포넌트끼리 직접 데이터를 전달하는 것은 ref(돔에 직접적인 접근)를 사용하여 가능하지만,
    정말 비효율적이다. 이리저리 꼬이기 떄문. 코드의 양이 많아질수록 유지보수가 점점 어려워진다.
    (리액트에서는 이런건 일종의 안티패턴이다.)

    컴포넌트들은 부모를 통하여 대화하여야 한다. (자식들은 부모를 통해서만 대화한다.)
    내부 컴포넌트 끼리는 대화하지 않는다.
    부모에서 전달할 데이터, 함수는 props로 자식 컴포넌트에 전달한다.

    리덕스에서는 뷰 만을 담당하는 프리젠테이셔널 컴포넌트와, 상태 관리를 담당하는 컨테이너 컴포넌트로 분리된다.

    컨텍스트 API 에서는 설정할 때와 설정한 값을 불러올 때로 컴포넌트가 나뉜다.


* 리액트 state 에서 배열을 다룰 때는 절대로 state 자체를 변경해서는 안된다! (ex - push 메서드)
  나중에 최적화를 하게 될 때, 배열을 비교하여 리렌더링을 방지하게 된다.
  만약, push 를 사용한다면 최적화를 할 수 없게 된다.
  반면, concat 의 경우엔 새 배열을 만들기 때문에 괜찮다. 

Array.prototype.findIndex()

    var array1 = [5, 12, 8, 130, 44];

    function isLargeNumber(element) {
        return element > 13;
    }

    console.log(array1.findIndex(isLargeNumber));
    // expected output: 3

객체들이 들어있는 배열들을 업데이트 할 때마다 복사한다면 오버헤드가 발생하지 않을까? 

    (전개 연산자를 통하여 업데이트 해야 할 배열 혹은 객체의 내용을 복사한 상태)
    걱정하지 않으셔도 됩니다. 전개연산자를 통하여 배열을 복사하는것은 deepCopy 가 아닌 
    shallowClone 이기 때문에, 내부의 객체 안에있는 내용들은 기존의 것들을 재사용합니다. 
    즉 n개의 원소가 들어있다면 O(n) 정도의 복잡도라는 것이죠. 
    따라서, 내부의 객체를 바꿔야 할 때는 바꿀 객체를 새로 지정하고 내부의 값을 
    복사해줘야합니다.

최적화

    3~4개만 있는 리스트는 전혀 상관 없습니다. 
    하지만 갯수가 무수히 많아질 수 있다면 최적화를 꼭 해줘야 
    나중에 보여주는 데이터가 많아져도 버퍼링이 걸리지 않습니다. 
    특히, 아이템 내부에 보여지는 컴포넌트들이 여러개라면 더더욱 최적화를 해줘야합니다.

    컴포넌트 라이프 사이클 메소드중 shouldComponentUpdate 는 
    컴포넌트가 리렌더링을 할 지 말지 정해줍니다. 
    이게 따로 구현되지 않으면 언제나 true 를 반환하는데요, 
    이를 구현하는 경우에는 업데이트에 영향을 끼치는 조건을 return 해주시면 됩니다.

    ex)

        shouldComponentUpdate(nextProps, nextState) {
            return this.props.todos !== nextProps.todos;
        }

    

Context API

    const Context = createContext(); // Context 를 만듭니다.

    Context 안에는 Provider 와 Consumer 라는게 존재합니다.
    이 둘은 Context 를 이용하기 위해 필요한 컴포넌트들입니다.

    Provider 는 Context 에서 사용 할 값을 설정할 때 사용되고,
    Consumer 는 나중에 우리가 설정한 값을 불러와야 할 때 사용됩니다.
create React app (node.js / npm)

    npx create-react-app 프로젝트 이름 (npx는 npm 5.2+. 이상 작동)
    해당 프로젝트 경로에서 npm start

웹 CDN 관련

    * when deploying, replace "development.js" with "production.min.js"

    <script crossorigin src="https://unpkg.com/react@16/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"></script>

    * Why the crossorigin Attribute?
    
    If you serve React from a CDN, we recommend to keep the crossorigin attribute set:
    We also recommend to verify that the CDN you are using sets the 
    
        Access-Control-Allow-Origin: *

    HTTP header.
    This enables a better error handling experience in React 16 and later.

JavaScript Tips

    If you haven’t worked with JavaScript in the last few years, these three points should give you enough knowledge to feel comfortable reading the React documentation:

    1. We define variables with let and const statements. 
       For the purposes of the React documentation, you can consider them equivalent to var.

    2. We use the class keyword to define JavaScript classes. There are two things worth remembering about them. 
       Firstly, unlike with objects, you don't need to put commas between class method definitions. 
       Secondly, unlike many other languages with classes, in JavaScript the value of this in a method depends on how it is called.

    3. We sometimes use => to define "arrow functions". They're like regular functions, but shorter. 
       For example, x => x * 2 is roughly equivalent to function(x) { return x * 2; }.
       Importantly, arrow functions don't have their own this value so they're handy when you want to preserve the this value from an outer method definition.

       Don't worry if this is too much to take in at once. The MDN JavaScript Reference is a stellar resource, and you can consult it whenever you get confused by something.

Ready to deploy to production

    running npm run build will create an optimized build of your app in the build folder.

Next.js

    Next.js is a popular and lightweight framework for static and server‑rendered applications built with React. 
    It includes styling and routing solutions out of the box, and assumes that you’re using Node.js as the server environment.

Gatsby

    Gatsby is the best way to create static websites with React. 
    It lets you use React components, but outputs pre-rendered HTML and CSS to guarantee the fastest load time.

--------------------------------------------------------------------------------------------------------------------------

Creating a Toolchain from Scratch

    A JavaScript build toolchain typically consists of:

        A package manager, such as Yarn or npm. It lets you take advantage of a vast
        ecosystem of third-party packages, and easily install or update them.

        A bundler, such as webpack or Parcel. It lets you write modular code and bundle 
        it together into small packages to optimize load time.

        A compiler such as Babel. It lets you write modern JavaScript code that still works
        in older browsers.

    If you prefer to set up your own JavaScript toolchain from scratch,
    check out this guide that re-creates some of the Create React App functionality.

    https://blog.usejournal.com/creating-a-react-app-from-scratch-f3c693b84658

    Don't forget to ensure your custom toolchain is correctly set up for production.

--------------------------------------------------------------------------------------------------------------------------


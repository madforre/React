SPA?

    Single Page Application (싱글 페이지 어플리케이션) 의 약자입니다. 말 그대로, 페이지가 1개인 어플리케이션

리액트 라우터 설치

    npm add react-router-dom
    npm add cross-env --dev

        react-router-dom: 브라우저에서 사용되는 리액트 라우터 입니다.
        cross-env: 프로젝트에서 NODE_PATH 를 사용하여 절대경로로 파일을 불러오기 위하여 
                   환경 변수를 설정 할 때 운영체제마다 방식이 다르므로 공통적인 방법으로 설정 할 수 있게 해주는 라이브러리입니다.

디렉토리 생성

    src/components: 컴포넌트들이 위치하는 디렉토리입니다.
    src/pages: 각 라우트들이 위치하는 디렉토리 입니다.
    src/client: 브라우저 측에서 사용할 최상위 컴포넌트 입니다. 우리가 추후 서버사이드 렌더링을 구현 할 것이기 때문에 
                디렉토리를 따로 구분하였습니다. (서버사이드 렌더링을 할 때에는 서버 전용 라우터를 써야합니다.) 
                여기서 라우터를 설정합니다.
    src/server: 서버측에서 사용 할 리액트 관련 코드를 여기에 넣습니다.
    src/shared: 서버와 클라이언트에서 공용으로 사용되는 컴포넌트 App.js 가 여기에 위치합니다.
    src/lib: 나중에 웹 연동을 구현 할 때 사용 할 API와 코드스플리팅 할 때 필요한 코드가 여기에 위치합니다.

NODE_PATH 설정

    컴포넌트나 모듈을 import 할 때 보통 상대 경로로 불러온다.
    package.json 파일을 열어 scripts 의 start 와 build를 수정해주면
    절대경로로 해결 할 수 있다.

    package.json - start와 build

        “start”: “NODE_PATH=src react-scripts start”,
        “build”: “NODE_PATH=src react-scripts build”,

    Windows 사용자라면 이 코드가 제대로 작동하지 않을 것이다.
    따라서 Windows 사용자는 yarn 으로 cross-env를 설치해주어야한다.

        yarn add cross-env

    이제 각 스크립트의 앞부분에 NODE_PATH 를 설정한다.

    package.json - start와 build

        “start”: “cross-env NODE_PATH=src react-scripts start”,
        “build”: “cross-env NODE_PATH=src react-scripts build”,

라우트 사용

    라우트를 설정 할 때는 Route 컴포넌트를 사용하고, 경로는 path 값으로 설정한다.

라우터 흐름

    개발서버 쪽에서 historyApiFallback 설정을 통하여 어떤 요청으로 들어오던 어플리케이션이
    불러와져있는 index.html을 보여주도록 되어있음.

    링크를 직접 입력해서 접속할 때에는 서버라우트를 한번 타게 된다.
    그러면 서버쪽에서 리액트앱으로 연결시켜줘야 한다.

* exact 를 하지 않으면, /about 에도 / 가 있기 때문에, 매칭이 되어서 보여진다.

라우트의 경로에 값을 넣는 방법

    params 사용
    query 사용

라우트가 전달받는 3가지 props

라우트로 설정한 컴포넌트는, 3가지의 props 를 전달받게 됩니다:

    history 
    
        이 객체를 통해 push, replace 를 통해 다른 경로로 이동하거나 앞 뒤 페이지로 전환 할 수 있습니다.

    location 
    
        이 객체는 현재 경로에 대한 정보를 지니고 있고 URL 쿼리 (/about?foo=bar 형식) 정보도 가지고있습니다.

    match 
    
        이 객체에는 어떤 라우트에 매칭이 되었는지에 대한 정보가 있고 params (/about/:name 형식) 정보를 가지고 있습니다.

    URL 쿼리의 경우엔 컴포넌트 내에서 동적으로 사용할 수 있고, 
    params 의 경우엔 사용하기 전에 꼭 라우트에서 지정을 해주어야 한다.

    params

        * URL 의 params 를 설정 할 때에는 :foo 의 형식으로 설정한다. 
        이렇게 하면 foo 라는 params 가 생김

        params 를 이용하여 접속할 때 컴포넌트 중복이 생긴다면?

            exact 를 사용하거나 Switch 컴포넌트를 사용하여 해결한다.

            Switch 컴포넌트로 라우트들을 감싸면 매칭되는 첫번째 라우트만 보여주고 나머지는 보여주지 않는다.

    URL query

        이전 버젼에서는 URL 쿼리를 해석해서 객체로 만들어주는 기능이 자체적으로 있었다.
        그러나 쿼리를 파싱하는 방식은 여러가지가 있어서, 개발자들이 여러가지 방식을 사용할 수 있도록
        이 기능을 더이상 내장하지 않는다. 따라서 URL 쿼리를 해석하는 것은 우리의 몫.

        * 자체적으로 구현하거나 라이브러리를 사용한다.

            npm add query-string (쿼리스트링 사용해보자.)

        URL query 만들 때 주의점

            받아오는 값들은 모두 문자열이다.
            따라서 비교를 할 땐 boolean 을 불러오던, 숫자를 불러오던,
            문자열 형태로 비교를 하거나 알맞은 형태로 변환을 시킨다음에 비교해야 한다.

라우트 이동하기

    Link 컴포넌트

        앱 내에서 다른 라우트로 이동할 때에는 일반 <a href ...>foo</a> 형식으로 하면 안된다.
        이렇게 하면 새로고침을 해버리기 때문.

        새로고침을 하기 위해선, 리액트 라우터에 있는 Link 컴포넌트를 사용해야 한다.
        이 컴포넌트를 사용하면 페이지를 새로 불러오는걸 막고, 원하는 라우트로 화면 전환을 해준다.

    NavLink 컴포넌트

        NavLink 컴포넌트는 Link랑 비슷한데, 설정한 URL 이 활성화가 되면,
        특정 스타일 혹은 클래스를 지정 할 수 있다.

        Route 를 지정 할 때 처럼, 중첩될수도 있는 라우트들은 exact 로 설정을
        해야 한다. 활성화 되었을 때 특정 클래스를 설정하고 싶다면
        activeClassName 을 설정하면 된다.

라우트 속의 라우트

    이전 버젼에서는 Route를 선언하고 props.children 자리에 컴포넌트가 들어가는 형식이였다.
    그래서 모든 라우트는 최상위에서 정해주어야 했다.

    v4 에서는, props.children 을 사용하지 않고 라우트에서 보여주는 컴포넌트 내부에 
    또 Route 를 사용할 수 있게 된다.

헷갈리는 값들

    라우트가 받는 props 중에서, 상당히 헷갈리는 값들이 있다.

        location.pathname
        match.path
        match.url

    얘네 셋임

    라우터도 추후 다시 볼 것
    

ES6 클래스 와 리액트 간의 문제점

    - ES6 클래스는 믹스인을 지원하지 않는다. (리액트 클래스는 지원했음)
    - 간접성 (Indirection) : state를 변경하는 믹스인은 state 가 어디서 왔는지를 파악하기 어렵게 만든다.
                            특히 하나 이상의 믹스인이 있는 경우 더 문제가 된다.
    - 네이밍 충돌 : 두 개의 믹스인이 state의 동일한 부분을 변경하려고 하면 서로를 덮어 쓸 수도 있다.
                  createClass API는 2개의 믹스인이 동일한 키를 참조하는 getInitialState 를 갖고 있을 때 경고를 주는
                  검사 로직을 포함하고 있었지만, 완벽한 방어책은 아니였다.

    그래서 믹스인을 사용하는 대신, 리액트 커뮤니티의 많은 사람들은 결국 코드 재사용을 위해 HOC(Higher Order Component)로 알려진
    대안적인 기법에 정착했다.

    이 패러다임에서 코드는 데코레이터와 유사한 방식으로 재사용된다.
    먼저 렌더링될 대부분의 마크업들을 정의한 컴포넌트를만들고, 공유할 행위들을 담고 있는 다른 컴포넌트들로
    감싸면 된다. 필요한 행위들을 "첨가(mixing in)" 하는 대신, 컴포넌트를 장식(decorate)하면 되는 것이다.

HOC (Higher Order Component)

    직접 state를 관리하는 대신, prop을 통해 마우스 위치를 전달받는다.
    단순히 컴포넌트를 감싸면 prop를 사용 할 수 있게 된다!

    HOC 로 전환해서 얻는 이점?

        믹스인에 있었던 문제점들을 어느정도 해결한다.
        
        - ES6 클래스와 함께 사용 가능

    해결하지 못한 점

        - 간접성 : 여전히 간접성 문제 존재. 믹스인이 state가 어디서 오는지 알아야 했다면,
                  어떤 prop이 어떤 HOC에 의해 제공되는지에 대해 알아야한다는 것이 다를 뿐

        - 네이밍 충돌 : 이문제 역시 존재 동일한 prop명 사용하는 두 개의 HOC가 충돌 할 수 있음.
                      하나가 다른 하나를 덮어쓸 수도 있다. 또한
                      리액트는 prop 이름 충돌에 대해 경고를 해 주지 않는다.

        믹스인과 HOC가 공유하는 또 다른 문제는, 이들이 동적인 조합 대신에 정적인 조합을 이용한다는 것이다.
        
        * 정적 조합은 컴포넌트 클래스가 생성될 때 단 한번 발생

        render 메소드 내에서는 믹스인이나 HOC를 사용하지 않는데, 사실 리액트의 동적 조합 모델에서 중요한
        부분은 render 메소드이다.
        
        * render 메소드 내에서 조합을 하게 되면 리액트 전체 생명 주기의 모든 이점을 누릴 수 있다. (동적 조합)

        정리하자면 : HOC를 ES6 클래스와 함께 사용 하는 것은 createClass 와 믹스인을 사용할 때 갖고 있던
                    문제들을 그대로 가진 채 방식만 약간 변경되었을 뿐이다.

    HOC는 그저 새로운 믹스인일 뿐이다.
    HOC는 기존에 존재하는 컴포넌트에 추가하는 방식이 아닌, 새로운 컴포넌트를 만들어서 감싸는
    방식이기 때문에 더 많은 불필요한 코드들을 만들어낸다. HOC로부터 반환되는 컴포넌트는 자신이 감싸고
    있는 컴포넌트와 유사하게 동작해야 한다. (한가지 예- 동일한 props를 넘겨 받아야 한다.)
    이 사실 하나만으로도 HOC를 만들기 위해서 많은 장황한 코드들이 필요해진다.

    ex ) 좋은 예제를 React Router에 포함된 withRouter HOC에서 찾을 수 있을 것이다. 
         prop 전달, wrappedComponentRef,감싸진 컴포넌트의 정적 프라퍼티 끌어올리기, 
         그리고 다른 것들 모두가 리액트 라이브러리에 HOC를 장착하기 위해 필요한 춤의 일부이다.

Render Props

    믹스인과 HOC의 단점들을 피할 수 있는 또다른 코드 재사용 기법이 있다?
    
        이 기법을 Render Props 라고 부른다.
        
    render prop은 컴포넌트가 무엇을 렌더링해야 할 지를 알기 위해 사용하는 함수 prop이다.
    일반적으로 말하자면, 개념은 다음과 같다.

        행위를 공유하기 위해 "첨가(mixing in)" 하거나 컴포넌트를 장식하는 대신에,
        그저 상태를 공유하기 위해 사용할 수 있는 함수 prop를 이용해서 일반 컴포넌트를 렌더링하면
        된다.

    이 기법은 믹스인과 HOC가 갖고 있던 모든 문제들을 피할 수 있다.

        - ES6 클래스 - 문제없다. ES6 클래스로 만들어진 컴포넌트에서 render prop을 사용할 수 있다.
        - 간접성 - state나 prop이 어디서 오는지에 대해 알아낼 필요가 없다. render prop의 인자 목록에서
                  확인할 수 있다.
        - 네이밍 충돌 - 자동으로 property 명이 합쳐지는 방식이 아니므로, 네이밍 충돌이 발생할 여지가 없다.

    또한 render prop은 다른 컴포넌트를 감싸거나 장식하는 것이 아니기 때문에, 전혀 추가적인 코드가 필요 없다.
    그냥 단순히 함수일 뿐이다!

    추가적으로 이 조합 모델은 동적이다!!
    모든 것은 render 내부에서 발생하기 때문에, 리액트의 생명주기와 자연스러운 props, state의 흐름이 주는
    이점을 모두 취할 수 있다.

    이 패턴을 이용하면, 어떤 HOC든 일반 컴포넌트와 render prop으로 대체할 수 있다.
    그걸 증명해 낼 수도 있다.

Render Props > HOCs

    render prop이 HOC보다 더 강력한 패턴이라는 가장 설득력 있는 증거는 
    어떤 HOC든 render prop으로 구현될 수 있지만, 그 반대는 불가능하다는 점이다.

render props

    The term “render prop” refers to a technique for sharing code between React components 
    using a prop whose value is a function.
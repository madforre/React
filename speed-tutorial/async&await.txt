비동기 동기 차이

    어떤 루틴을 완전히 끝내고 제어를 반납하면 동기식
    동작이 안 끝났어도 일단 제어권을 반납한 후 지 할일 계속하면 비동기식

    예시

        - 전화로 물어봐서 즉답을 얻는다  = 동기 요청처리
        - 이메일로 물어보고 메일송신완료(리턴값). 하지만 답은 언제 올지 모른다 = 비동기 요청처리

async / await 의 목적은 프로미스의 이용을 쉽게 하는 것이다.
ES8부터 지원 ( 현제 모든 메이저 브라우저에 지원되고 있다. )

    // Just a standard JavaScript function
    function getNumber1() {
        return Promise.resolve('374');
    }
    // This function does the same as getNumber1
    async function getNumber2() {
        return 374;
    }

위와 유사하게 예외를 던지는 함수들은 거절된 프로미스를 반환하는 함수와 동일하다.

    function f1() {
        return Promise.reject('Some error');
    }
    async function f2() {
        throw 'Some error';
    }

await 키워드는 async 함수 내에서만 사용될 수 있으며 동기적으로
프로미스를 기다릴 수 있도록 해준다. 만약 우리가 async 밖에서 프로미스를 사용하면
여전히 then 콜백을 사용해야 한다.

    async function loadData() {
        // 'rp' is a request-promise function.
        var promise1 = rp('https://api.example.com/endpoint1');
        var promise2 = rp('https://api.example.com/endpoint2');

        // Currently, both requests are fired, concurrently and
        // now we'll have to wait for them to finish
        var response1 = await promise1;
        var response2 = await promise2;
        return response1 + ' ' + response2;
    }
    // Since, we're not in an `async function` anymore
    // we have to use `then`.
    loadData().then(() => console.log('Done'));

* 비동기 함수 표현식 을 통해서 비동기 함수를 정의할 수도 있다.
* 또 한 가지 중요한 점은 async/await 이 모든 메이저 브라우저에서 지원된다는 점이다.
    (호환성이 부족하다면 바벨이나 타입스크립트 같은 몇가지 트랜스파일러를 사용할 수도 있다.)

async & await 에러처리

    async/await을 이용하면 동일한 코드 구조로 비동기 코드와 동기 코드의 에러를 처리하는 것이 가능하다.
    바로 잘 알려진 try/catch를 이용하는 것이다.

    일반 코드와 비교해보자.

        function loadData() {
            try { // Catches synchronous errors.
                getJSON().then(function(response) {
                    var parsed = JSON.parse(response);
                    console.log(parsed);
                }).catch(function(e) { // Catches asynchronous errors
                    console.log(e);
                });
            } catch(e) {
                console.log(e);
            }
        }

    아래는 async / await 를 이용한 비동기 함수이다.

        async function loadData() {
            try {
                var data = JSON.parse(await getJSON());
                console.log(data);
            } catch(e) {
                console.log(e);
            }
        }

    훨씬 짧고 간단해진다!

조건문에 더 좋다

    async / await 을 이용해 조건문을 작성하는 것이 훨씬 직관적이다.

스택프레임과 관련된 장점

    async / await 어디에서 에러가 발생했는지에 대한 정보를 준다.
    반면에 프로미스 체인에서 반환된 에러 스택은 어디에서 에러가 발생했는지에 대한 정보를 주지 않는다.

디버깅에 대한 장점

    프로미스를 사용하면 디버깅이 쉽지않다.
    async/await를 이용하면 await 호출이 마치 일반적인 동기 함수인 것처럼 정확하게 지나갈 수 있따.

    비동기 자바스크립트 코드를 작성하는 것은 앱 자체에서만 중요한 것이 아니라 라이브러리에도 중요하다.
    최대한 많은 부분을 비동기화해서 이벤트 루프에서 처리될 수 있는 이벤트의 갯수를 늘려야 한다.
프로미스의 3가지 상태(states)

    Pending(대기) : 비동기 처리 로직이 아직 완료되지 않은 상태
    Fulfilled(이행) : 비동기 처리가 완료되어 프로미스가 결과 값을 반환해준 상태
    Rejected(실패) : 비동기 처리가 실패하거나 오류가 발생한 상태

Pending(대기)

    new Promise(); 메서드를 호출하면 대기 상태가 된다.

    new Promise(function (resolve, reject) {
        // ...
    });

Fulfilled(이행)

    콜백 함수의 인자 resolve를 아래와 같이 실행하면 Fulfilled(이행)
    상태가 된다.

        new Promise(function (resolve, reject) {
            resolve();
        });

    이행 상태가 되면 아래와 같이 then()을 이용하여 처리 결과 값을
    얻을 수 있다.

        function getData() {
            return new Promise(function (resolve, reject) {
                var data = 100;
                resolve(data);
            });
        }

        // resolve()의 결과 값 data를 resolvedData로 받음
        getData().then(function (resolvedData) {
            console.log(resolvedData); // 100
        });

    프로미스의 '이행' 상태를 좀 다르게 표현해보면 '완료' 임

Rejected(실패)

    new Promise()로 프로미스 객체를 생성하면 콜백 함수 인자로 resolve와
    reject를 사용할 수 있다. 여기서 reject 인자로 reject() 메서드를 
    실행하면 Rejected(실패) 상태가 된다.

        new Promise(function (resolve, reject) {
            reject();
        });

    그리고 실패 상태가 되면 실패한 이유(실패 처리의 결과 값)을 catch()로
    받을 수 있다.

        function getData() {
            return new Promise(function (resolve, reject) {
                reject(new Error("Request is failed));
            });
        }
    
        // reject()의 결과 값 Error를 err에 받음
        getData().then().catch(function (err) {
            console.log(err); // Error: Request is failed
        });

에러 처리

    then 의 두번째 파라미터에 사용 or .catch() 사용
    
    .catch 가 더 많은 에러를 잡아주므로 .catch()를 쓰도록 하자.
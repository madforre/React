Tutorial

* 환경설정

    (맥에서는 brew install node)

    node -v npm -v 로 설치 확인

    node 설치후

    npx create-next-app@latest . 명령어 입력. (작업 폴더 영역에)

    next.js에서는 react와는 달리 npm run start 가 아니라 npm run dev 로 실행해야한다.

* 배포 명령어

    next build - 실 서버를 위한 배포판을 만드는 명령

    next start - 그 배포판을 서비스하는 명령

    개발을 하건 실서버로 빌드를 하건 간에 사용자에게 서비스되는 내용이 저장되는 폴더가 .next 폴더임!

    npn run build -> npm run start 하면
    이전에는 6.5mb 였던 리소스가 338kb 대로 변경됨! 엄청난 차이가 있죠? (21배정도 차이)

    실서버용으로 배포판을 만들으니 훨씬 슬림해짐!

    사용자에게 서비스할 수 있는 네트워크 환경이 다 갖추어졌다면
    npm run start 를 실행중인 서버가 실제로 next.js 로 만든 서비스를 싱행하게 된다.

* 라우팅

    http://a.com/dashboard/analytics/

        a.com => domain

        dashboard => segment

        analytics => segment

        dashboard/analytics/ => path

    app 디렉토리에서 url 경로에 해당되는

    page.tsx, layout.tsx 를 만들어서 사용한다. 없으면 부모.. 루트 에서 찾음.


    이름을 부여하고 싶으면 폴더 만들 때 read/[id] 이런식으로 만들고
    [id] 폴더 안에 page.js 또는 page.tsx 파일을 만들면 된다.

* next.js 사용하면 그냥 좋아지는게 있음.

    바로 Server Side Rendering.

    개발자 도구의 메뉴에서 Run Command => Disable Javascript 하면 자바스크립트가 아예 꺼짐.

    리액트는 자바스크립트가 동작하지 않으면 웹페이지가 아예 랜더링이 되지 않는다.
    하지만 next.js 로 만든 페이지는 이 설정을 하고 리로드해도 랜더링이 잘 됨.

    이것이 가능한 이유? 사용자가 요청하면 서버쪽에서 react를 싱행해서, 그 응답 결과를 .next에 저장해서
    그것으로 응답해주기 때문!! 따라서 자바스크립트가 아닌 HTML을 응답함!

    확인 했으면 Enable Javascript 다시 해주자!

* next.js 의 단점?!

    Network 로 가서 3g로 바꾸면 일부로 지연현상을 만들 수 있음.

    이미 방문한 적 있는 페이지를 방문할 떄 또다시 페이지를 다운로드 하고 있음!!
    사용자 입장에서 느리고 답답할 수 있음! (인터넷 잘 안터지는 곳에서는.)

    이런 문제를 극복하려면? a 태그를 Link로 변경!

    웹 페이지를 방문하기 위해 Link에다가 마우스를 올려놓으면? 미리 다운로드 받기 시작함!
    클릭하자마자 짠 하고 나타남!

    이미 방문한 페이지를 클릭하려고 하면 아예 서버랑 아무런 통신조차 하지 않음! 사용자 입장에서는 빠르고 서비스 제공자 입장에서는
    돈을 절약할 수 있겠죠!

    이처럼 웹 페이지가 여러 개 페이지 임에도 불구하고 마치 한페이지처럼 동작하는 것을 Single Page Application 이라고 하고,
    next.js 를 사용할 떄 a 태그를 Link 로 변경하기만 해도 개발자는 싱글 애플리케이션이 되는 놀라움을 경험할 수 있음!

    3g로 느리게 테스트 해보았으면 No throttling 로 다시 복구하자!

* 정적 자원 사용하기

    이미지와 같은 자원 사용할 떄는 해당 파일을 public에다가 위치시키자.

* back-end 간단 설정

    db.json 만들어 준 다음 (mocking file)

    npx json-server --port 9999 --watch db.json 명령어 실행.

    팁: 개발자 도구 클릭해서 network 탭에서 esc 누르면 아래 콘솔창 접근가능해짐.

    서버랑 통신하는 fetch 명령어 사용해보자.

    fetch("http://localhost:9999/topics").then((res) => { return res.json(); }).then(result => { console.log(result) })

    res.json() ===> 서버가 준 데이터가 json 임. 자바스크립트로 컨버팅함. 

    아무튼 json-server를 이용해서 백앤드 서버를 순식간에 구축했다!

    이제 이걸 이용하여 실습하도록 하자.

* 글목록 실습

    리액트 18버젼부터 Server Component, Client Component 구분됨.
    (이전까지는 클라이언트 컴포넌트 였음.)

    Server Component
    
        - secure data
        - cookie header
        - fetch
    
    Client Component

        - useState
        - useEffect
        
        - onClick
        - onChange

        - useRouter
        - useParams

        - fetch

    Next.js 에서 특별한 조치를 하지 않으면
    Server Component로 간주합니다.

    사용자와 상호작용하는 ex - 버튼 같은 것만 클라이언트 컴포넌트로 만드는 것이 유리하다.

    즉 상호작용하는 것은 클라이언트 컴포넌트로 하고
    정보를 단순히 보여주는 것은 서버 컴포넌트로 하는 것이 유리하다.

    이런 큰 틀의 개념을 가지고 있자.

    next.js 는 기본적으로 서버 컴포넌트로 간주한다. useEffect, useState 사용하려고 하면 에러 발생함.
    사용하려면 use client 명시해주어야 한다.
    
    정적인 페이지에서 자바스크립트 꺼보면..
    정적인 내용들은 잘 보이지만, 그러나
    useEffect와 관련된 코드들 같은 자바스크립트 컨텐츠들은 fetch 하는 시간동안 표기 안됨. (클라이언트 컴포넌트인 경우)
    사용자 입장에서는 로딩 될 때 까지 기다려야됨. 또한 아이디나 패스워드 같은 정보를 노출시키면 안됨!
    ( 보안적으로도 문제가 있을 수 있음. )

    ===> 서버 컴포넌트로 전환해야함!

    간단함. use client 없으면 서버 컴포넌트임.

    서버 컴포넌트는 그냥 한번만 랜더링 해서 html로 보내주면 되기 때문에 async 를 사용해서 한번만 fetch 해주면 된댜.
    (사용할 데이터들을. await 라는 promise와 관련된 문법을 사용하기 위해 async 선언 필요)

    .next 폴더에 자바스크립트 관련된 코드들 빼고 전송함. (장점1. 클라이언트로 자바스크립트를 전송하지 않으니깐 용량이 적겠죠.)

    장점2. Fetch에서 사용하고 있는 api 서버가 가깝다면 아주 빠르게 이 동작이 끝나겠죠. (가져올 api 주소 기다렸다가 정적인 내용으로 뿌려줌.)

    서버쪽에서 동적으로 생성한 내용을 클라이언트로 정적인 내용으로 전달해줌!!!

* 글 일기 실습

    글 읽기 할 차례..

    https://www.youtube.com/watch?v=nHCBiiTYma4&list=PLuHgQVnccGMCwxXsQuEoG-JJ7RlwtNdwJ&index=12

    npm run dev 와
    npx json-server --port 9999 --watch db.json 키고 시작할 것..

* 글 생성 실습

    혹시라도 npm run dev 해놓고 오류가 발생했다? (파일 수동 삭제시 에러 발생 등등등..)

    rm -rf .next 후 npm run dev 커맨드 창에 다시 입력해주자. (문제가 생긴다면 .next를 지우고 다시 시도해보세요!)


    데이터 불러올 때는 async await 쓰던지 then 쓰던지 하면 된다.

* cache

    목록 갱신 안되는 경우 ?

    1. rm -rf .next
    2. npm run dev

    리로드를 해도 목록이 갱신이 안된다?
    fetch 로 인해서 만들어진 캐쉬를 지우는 것이
    next.js 상에서의 Revalidating 을 보면 처리할 수도 있고. (나중에 찾아서 공부해보세요.)
    간단하게 해결하려면?
    fetch 로 데이터를 가져온 후에 캐시로 만들지 않는 것임.
    (성능은 희생하겠지만, 단순하게 구현 가능.)
    
    router.refresh();는 서버 컴포넌트를 강제로 다시 랜더링 하는 기능이다.
    (router.push 를 먼저 하고 리프래쉬해야 클라이언트 컴포넌트인 경우 갱신되는듯.)

    1. const response = await fetch('http://localhost:9999/topics', { next: { revalidate: 0 }}); 
    
        10초가 지나면 캐시가 다시 만들어진다!! (리디렉션 했을 떄 바로 캐쉬가 업데이트 되지 않음.)

    2. const response = await fetch('http://localhost:9999/topics', { cache: 'no-store' } ); 
    
        아니면 두번쟤 파라미터로 { cache: 'no-store' } 로 설정해주면 글 목록을 담당하고 있는 데이터가 캐쉬되고 있지 않게 된다!

* update & delete 버튼 구현

    
    팁: 서버 컴포넌트에서 함수 실행해서 콘솔로그 찍어보면 vscode 터미널에서 출력 확인할 수 있음.
        클라이언트 컴포넌트에서 콘솔로그 찍어서 확인하고 싶으면 useEffect 써서 마운트 되는 시점에
        쓸 수도 있겠죠?

    랜더링시 참고 : 'void' 형식은 'ReactNode' 형식에 할당할 수 없음. (랜더링시).. 타입스크립트는 일단 안됨.

    컴포넌트화 한 부분 마우스로 다 클릭해서 전구 만들어서 뉴파일 해주면 컴포넌트 파일 자동으로 생성됨 와우
    그리고 클라이언트 컴포넌트에서는 useParams 사용할 수 있음!

    * 랜더링이 두번 되는 이유??? 

        (참고문헌 - https://velog.io/@dlgudwns1207/%EC%99%9C-Next.js-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-useEffect-%EA%B0%80-%EB%91%90%EB%B2%88-%ED%98%B8%EC%B6%9C%EB%90%98%EB%8A%94-%EA%B1%B8%EA%B9%8C)

        문제 발생 이유 ❓

            해당 이슈는 React 18 에서 도입된 strict mode 기능에 의해 발생한다. Next.js 의 개발 환경에서는 이 stirct mode 가 활성화되어 있다.

            그렇다면, strict mode 가 뭘까?

            strict mode 는 개발 환경에서 어플리케이션을 더 엄격하게 검사하여 예상치 못한 버그를 사전에 찾아내는 데에 도움을 주는 기능이다.

            이를 활성화 하게 되면,

            컴포넌트의 불완전한 렌더링을 검사하기 위해, 한 번 더 렌더링된다.

            Effect 클린업 함수를 작성하지 않아 발생하는 버그를 검사하기 위해, Effect 들을 한 번 더 실행한다.

            컴포넌트에서 더 이상 사용되지 않는 API 를 사용하는 지 검사한다.

            우리가 주목할 부분은 2번.

            해당 이슈가 발생한 원인이 strict mode 때문임을 알 수 있다.

        문제 해결 ⭕

            strict mode 가 이 문제를 발생시키는 것을 알았으니, 이를 설정을 통해 비활성화하여 문제를 간단하게 해결할 수 있다.

            다만 비활성화 전 유의해야할 점이 몇 가지 있다.

            우선, strict mode 는 개발 환경에서만 동작하고, 프로덕트 배포 환경에서는 동작하지 않는다.

            또한, strict mode 는 상술했듯 예기치 못한 버그들을 찾아내는 데에 도움을 준다.

            따라서, 개발 환경에서 필수적으로 해당 문제를 해결해야 하는 상황이 아니라면, 굳이 strict mode 를 비활성화 할 필요는 없다. 어차피 배포 환경에서는 원하는 대로 Effect 가 한 번만 호출될테니까!

            // next.config.js
            const nextConfig = {
                reactStrictMode: false,
            };

            module.exports = nextConfig;
            Next.js 프로젝트 최상위의 next.config.js 파일을 위와 같이 수정하면 비활성화 끝!

            원하는 동작대로 useEffect 가 한 번만 호출되는 것을 확인할 수 있다.


* 글 수정

    리액트 철학 -입력된 값 바뀌지 않음. 밸류값 변경 안되었기 때문.. onChange 로 값 변경 필요함.

    목록이나 상세보기 등의 화면이 변경이 되지 않는다? 바뀌지 않는다?!

    fetch 사용시 캐처처리 확인하기!

    두번째 인자로 { next: { revalidate: 0 } } 또는 { cache: 'no-store' } 
    등 next.js 에서 제공하는 옵션 활용할 것!

* 글 삭제

    포스트 삭제 후 경로를 
    useRouter를 이용하여 목록으로 이동시켜주어야 한다.

    useRouter는 클라이언트 컴포넌트에서만 사용이 가능하다.

    라우터 사용법은 아래를 참고하자.
    
        import { useParams, useRouter } from "next/navigation";

    nextjs 13버전 이전에는
    import { useRouter } from 'next/router'; 를 사용했다.

    이제는 useRouter 처럼 라우터와 관련된 훅 사용시
    import { usePathname, useRouter } from 'next/navigation'; 이런 식으로 해야 되는 듯.
    (변경 사항. 내 생각에는 내부 함수들이 좀 더 명시적으로 바뀐게 차이인 것 같음.)

* 환경변수 설정

    민감한 비밀정보는 클라이언트에 노출이 되면 안된다. (브라우저에 유출 되면 안됨.)

    따라서 layout.tsx와 같은 서버 컴포넌트에서만 process.env 정보 접근이 가능하다.
    (클라이언트 컴포넌트는 undefined 로 뜸.)

    환경변수를 클라이언트 컴포넌트... 에서도 사용되게 하려면
    앞에다가 NEXT_PUBLIC_ 이라는 접두사를 붙여주면 된다.

    NEXT_PUBLIC_ 덕분에 api url라는 환경변수가 브라우저에 잘 전송될 수 가 있게 된다. (클라이언트 컴포넌트에서!)
    왜 이렇게 해야되나요? 바로 보안 떄문.

    - 버젼관리 할 때 환경변수는 어떻게 관리해야 되나요?

        .gitignore 보면 .env*.local 은 버젼관리 못하게 기본적으로 막아놨음.

        .env.local.example 같은 파일을 만들어서 버젼관리를 통해 설정된 환경 변수 들을 공유할 수 있음.

        .env.local.mock 이런것도 괜찮은듯..


* 서버 구성 요소가 렌더링된 후 React Server Component Payload(RSC) 라는 특수 데이터 형식이 클라이언트로 전송됩니다. 
    RSC 페이로드에는 다음이 포함됩니다.

    1. 서버 구성 요소의 렌더링된 결과입니다.
    2. 클라이언트 구성 요소를 렌더링해야 하는 플레이스홀더(또는 홀)와 해당 JavaScript 파일에 대한 참조입니다.

    React는 이 정보를 사용하여 서버와 클라이언트 구성 요소를 통합하고 클라이언트의 DOM을 업데이트합니다.

* 추후 실습할 내용 

    next.js 공식 홈페이지 프로젝트 참고

===========================================================================================

Tutorial 2

리액트는 라이브러리고, 넥스트.js는 프레임워크다.

* 라이브러리

    라이브러리란? 코드 내에서 내가 사용하는 것.
    원하는 아키텍처를 사용하여 원하는 방식으로 코드를 작성함.
    객체 지향, 함수 지향 프로그래밍 등 원하는 언어로도 작성 가능.

    라이브러리는 코드 내에서 사용하려고 설치하는 것이지만 사용의 주체는 나.
    우리가 구조에 대한 모든 결정을 내리는 것임.
    파일을 어디에 저장할지, 폴더의 이름은 무엇이 될지, 파일의 이름은 무엇이 될지 등 우리가 모든 결정을 내린다.
    즉, 라이브러리는 우리가 필요할 떄 사용할 수 있는 것임.

    ex) 통화를 변환하는 라이브러리를 설치하고 필요할 때 사용.

    원하는 프로그래밍 언어를 이용해 원하는 구조를 만들고 원하는 function, class등 파일 이름도 마음대로 짓고 원하는 이름도 넣을 수 있음.
    그리고 라이브러리의 도움이 필요할 떄만 가져와서 사용할 수 있는 것임.

    라이브러리는 우리를 위해 결정을 내리지 않았음. 우리가 라이브러리를 사용하는 것임.
    다운받아서 사용하는 것.

    React는 UI 인터페이스를 build하는데 사용되는 라이브러리이다.
    반응형 사용자 인터페이스를 구축하는데 도움이 됨.
    우리가 하는건 UI를 위해 리액트를 사용하는 것임.
    어떤 폴더, 파일, 구조에서 리액트를 사용할지는 우리가 결정할 수 있음.
    우리가 활용하는 것. 그게 라이브러리이다.


* 프레임워크란?

    프레임워크가 다른 점은, 이게 우리의 코드를 사용한다는 것임.
    여기에서는 우리에게 주도권이 없음.
    프레임워크가 주도하고 결정한다.
    프레임워크를 사용하면, 프레임워크가 우리를 위해 많은 일들을 대신 해줌.
    프레임워크는 여러가지 결정을 우릴 위해 대신 해줌.
    폴더 이름, 에플리케이션 시작할 필요 등등 없음.

    ex) Next.js 는 여러가지 feature.. 특징을 가지고 있음.

    우리를 위해 implement 해줌. 우리가 작업할 필요가 없도록.
    next.js가 가져다주는 좋은 선물들을 활용하기 위해서는 next.js가 사용하는 규칙들을 따라야 한다.

    제시하는 규칙을 따라야 함.
    이런게 프레임워크다. 우리가 규칙을 지켜야 함.
    우리가 올바른 방법으로 올바른 위치에 파일을 넣는다는 전제하에
    next.js가 풀스텍 웹 어플리케이션을 만들어줌.
    그러기 위해서는 우리는 next.js의 규칙에 따라야 함.

    잘못된 위치에 파일을 넣는다면 작동하지 않을 것.
    next.js의 규칙을 따라야 함.
    next.js 를 import하고 사용한다는 개념이 아님.
    next.js가 우리의 코드를 call 함.
    next.js가 우리 코드를 호출하는 거임.

    next.js 프로젝트를 시작하고 프레임워크를 시작하면 프레임워크가 코드를 찾아서 실행할 것임.

    코드를 올바른 위치에 배치하고, 함수에 올바른 이름을 지정하고 변수를 올바른 모양으로 export하면 next.js가 웹사이트를 구축해줄 것임.

    next.js의 준비된 좋은 기능들을 우리가 사용하는 것임.

* 정리.

    라이브러리는 내가 사용하는 것.
    프레임워크는 내가 결정을 내리는 것이 아니고 코드를 올바른 위치에 넣으면 프레임워크가 그 코드를 가져와서 사용함.
    next.js의 경우 풀스텍 웹 애플리케이션을 빌드해줌.

    라이브러리는 우리가 사용하고 프레임워크는 우리의 코드를 사용한다.

------------------------------------------------------

14버젼 달라지는 점

    * 이제 next.js에는 app router가 있고 이는 app 폴더에서 찾을 수 있음.
        (이전에는 /pages 였음. 원한다면 같이 놓고 사용할 수 있음.)

        next.js 14 프로젝트에서 여전히 pages router를 사용해도 에러가 발생하지 않을거임.

        천천히 최신 app router를 이용해서 만들어가면 됨.
        원래의 화면은 pages에 남겨두고
        점진적으로 새로운 화면들을 app에 만들어서 적용할 수 있음. 둘다 잘 작동할 것임.
        (기존 13이하 프로젝트였다면.)

        한번에 모든 것을 migrate한다고 걱정하지 않아도 됨.

        routing 하는 방법 변경됨!! date fetching 하는 방법도 변경됨 많이!!!

        getStaticProps, getServerSideProps, getStaticPaths 같은 건 이제 없음.
        왜냐면 data fetching이 많이 변했음. routing도. 하지만 더 나아졌다고 함.

        회사에서 오래된 11, 12를 사용하고 있다? 새로운 기능을 사용하고 싶으면 업그레이드 한 후
        app router를 pages router와 함꼐 사용할 수 있다.

        나중에 pages가 사라질 수 있지만 당장 사라지진 않을 거임.

        아무튼 app router는 새롭고 data fetching router도 많이 달라졌음.
        그리고 신기능들은 app router에서 사용할 수 있음.
        
------------------------------------------------------

* next.js 프로젝트 수동 설치

    1. npm init
    2. MIT 라이센스로 변경
    3. npm install react@latest next@latest react-dom@latest

        (react는 ui와 다른 모든 것들을 구성하는 부분. react-dom은 그것을 브라우저의 Document Object Model(DOM)에 렌더하는 역할을 함.
        react native 처럼 ios나 android 기기에 렌더하는 것 처럼.)

    4. script 수정

        "dev": "next dev" 추가.

        dev 명령어를 실행하면 Next JS를 실행시킬 수 있다.
        그 뒤엔 NextJS가 내 코드를 찾을 것임.
        왜? NextJS는 사용자가 프레임워크를 호출하는 것이 아닌
        프레임워크가 코드를 호출하는 프레임워크이기 떄문!
        넥스트JS가 내 코드를 사용하기 때문임.

    - NextJS는 page라는 폴더를 찾기 시작할 거임. app 폴더 안에 있는.

    5. 경로에 app폴더 안의 page 파일을 만들어줘야한다. (소문자로) 필수임!

    6. tsx or jsx 선택.

    - NextJS는 실행할 떄 app 폴더 안의 page.tsx를 찾기 시작할 것임!
    
    7. page.tsx 작성하기

        export default function Tomato() {
            return <h1>Hello NextJS!</h1>
        }

        - h1 에러날거지만 괜찮음. npm run dev 실행할 거니까.
        ( 프레임워크를 시작하는 순간 TypeScript를 원한다고 알아낼 것이기 때문.
         그 뒤에 내가  필요한 TypeScript 설정을 자동으로 설치해줄 것임.)

    8. npm run dev 실행

        It looks like you're trying to use TypeScript but do not have the required package(s) installed.
        타입스크립트 사용하시는 것 같네요 하고 문구 뜸.

    - 아무것도 import 하지 않았음! 근데 동작한다! ReactJS 조차 import 하지 않았지만. 동작함.
        프레임워크임.

    9. Your page app/page.tsx did not have a root layout. We created app/layout.tsx for you.
        ✓ Compiled

        뜨면 성공임. layout.tsx는 왜 필요할까? 이제 알아볼 것임.

        자동 새로고침도 됨.

------------------------------------------------------

Recap

    Next.js는 프레임워크다.
    우리가 올바른 폴더에 정확한 이름의 파일이 들어가 있으면
    알아서 웹사이트를 만들어 줄 것임.

    Next.js 프로젝트를 생성하기 위해선 그저
    package.json 로 Node.js 프로젝트를 생성하고
    npm install 로 next, react, react-dom를 설치하기만 하면 된다.
    그리고 dev라는 script를 추가해주면 된다. (next dev 호출하도록.)

    app폴더 생성해줘야함.
    page.tsx, layout.tsx 만들어줘야함. 얘네를 Next.js가 참조하거든.
    단 참조하는 컴포넌트는 default 컴포넌트로 export 되어야 한다.
    (export default 된 리액트 컴포넌트여야함.)

    react를 따로 import 안해도 next.js가 알아서 해줘서 편리함.

    * default export 객체는 하나만 지정할 수 있다.

------------------------------------------------------

app - layout.tsx, page.tsx 를 root segment 라고 한다.

* routing

    Next.js는 파일시스템을 이용하여 라우팅을 처리한다.
    app폴더 내에서 폴더명을 about-us 라고 만들면, /about-us 로 이동하게 된다.
    about-us로 이동했을 떄 NextJS가 렌더링할 UI를 제공하지 않으면 404가 뜸.
    page.tsx 생성하여 작성해주면 정상 동작함.
    UI를 작성하여 리턴해주도록 하자.

    ex) 

        export default function AboutUs() {
            return <h1>About us!</h1>;
        }

    react-router-dom 처럼 수동적으로 알려줄 필요가 없음.
    파일 시스템을 이용해서 경로를 지정해주면 됨.
    해당 경로 폴더안에 page.tsx를 꼭 생성해야함.

    page가 없으면 404 리턴함. 즉 이 폴더의 모든 의도와 목적은 url을 생성하기 위한 것임.
    page.tsx나 page.jsx를 생성해줘야함.

    page.tsx가 아니면 그냥 컴포넌트임.
    import해서 사용하면 됨. 단, url은 되지 못할 것임.
    page가 있는 폴더에 components를 만드는 건 뭔가 조금 이상해서 선호하지는 않지만
    할 수는 있음. 공식문서도 그렇게 작성하기도 함. 많은 사람도 그렇게 하기도 하고.

    아무튼 page.tsx만 이해하기만 하면 괜찮음.

------------------------------------------------------

* not-found.tsx

    특별한 파일. app 폴더에 작성.

    ex) 

        /app/not-found.tsx 에 작성.

        export default function NotFound() {
            return <h1>Not found!</h1>;
        }

* usePathname은 "use client"; 써줘야함. 상단에.

    왜? 클라이언트 컴포넌트니까.

------------------------------------------------------

next.js 는 리액트 컴포넌트를 가져와서 html로 변환하여 전달해줌.

Next.js Rendering? react code -> html !

* 클라이언트 사이드 렌더링

    client는 JavaScript를 로드하고, 그 후에 JavaScript가 UI를 빌드한다.

* next.js로 빌드할 때는 자동으로 default로 서버사이드 렌더링이 된다.

    UI는 이미 빌드되어있고 HTML도 존재함.
    JavaScript 꺼도 동작함. HTML을 전달받기 떄문.

    "use client" << 이거 쓴다고 해서 클라이언트사이드 랜더링이라고 헷갈릴 수 있음.
    이거 써도 서버사이드 랜더링임!!

    백앤드에서 랜더링됨!!! 첫번째로 모든 컴포넌트와 페이지들은 먼저 백앤드에서 랜더링된다!!
    그것들은 HTML로 변환되어 브라우저에 넘겨지게 됨!!!

    장점! UI를 빌드하는데 React를 쓸 필요가 없음. React는 그 후에 추가됨.
    (이걸 하이드레이션이라고 하는데 나중에 공부할 거임.)

    "use client" 여부와 상관 없이
    아무튼 컴포넌트와 페이지들은 전부 백앤드에서 랜더링이 먼저 된다.
    랜더링이란? 자바스크립트 펑션을 가져와서 브라우저가 이해하는 HTML로 변환하는 작업을 의미함.

    Next.js에서는 HTML결과물은 브라우저에 주어지게 된다. 
    자바스크립트를 활성화하던 비활성화하던 볼 수 있는 이유임.

* hard navigation -> a태그의 href만 사용. 앵커태그만 그냥 누르고 있는 거임.

* Next.js 의 Link Component

    client side only navigation.

    React가 hydrate 되면 훨씬 빠름.
    앵커태그에 클릭이 발생할 떄 리액트가 끼어들게 됨.
    페이지 전체를 reload 하지 않고 빠르게 nagivate 할 수 있게 됨.

* 처리 순서

    - 라우터 링크 접근 -> Boring Dummy HTML -> :) -> init(Boring HTML)

    (일단 사용자는 백앤드에서 생성된 Boring HTML을 받고 오 빠르네 하고 기뻐함)
    
    Boring HTML을 받고 나서 interactive 하게 해줌.
    ex -> 받고나서 갑자기 navigation 이 React Component 가 되는 것.
    Initialize React application ! )자바스크립트.. 리액트가 로딩 되고 나면.)

* 1씩 더해지는 카운팅 버튼 기능인 경우 처리순서

    자바스크립트 로딩 안되었으면 클릭해도 0이 그대로일 것임.
    자바스크립트가 로드되면 React가 버튼에 이벤트리스너를 연결시킬 것임.
    그리고 state 같은 것들과 연결시킴.
    그리고 나서 우리의 components가 interactive 해지는 것임!

    /about-us ------> <button>0</button> -------> :) (사용자가 기뻐함. 빨리 로딩되는 것처럼 보이니까.)
    --------> 
    기뻐하는 동안 즉시 뒤쪽에서 우리는 프레임워크를 로드하고, 프레임워크가 Initialize 되는 때에
    비로소 그 버튼은 우리가 만든 onClick eventListener 가 연결된 버튼이 되는 것임!

    이게 바로 hydration 프로세스!!

    먼저 0만 적혀있는 쌩 Html인 simple 버튼을 사용자가 먼저 받고,
    그리고 나서 React를 initialize하여 onClick을 부착해
    작성한 기능을 수행하도록 해준다.
    그게바로 hydration이다.

    (비유 => dehydrated된 딸기, 신선한 hydrated된 딸기를 생각하자.)
    dehydrated means remove the water.
    말라비틀어진 딸기.. 형태만 있는 boring html이라고 생각하자.

    React나 프레임워크가 client에 로드되면 우리는 그 애플리케이션을 hydrate 하는 것임.
    그러면 그걸 완전한 functional interactive app으로 변환시킬 수 있음.

* Hydration ?

    단순 HTML을 React application 으로 초기화하는 작업임!!
    (동결건조된 건더기나 과일에 수분 공급하는, 활력을 불어넣는 느낌!!)

    뒷단에서 우리는 next.js를 로딩하고 framework를 초기화하고 
    버튼 같은 기능 위에 React application을 생성해준다.
    그러면 그 버튼은 interactive 해지고, eventListener 가 추가된다.

    interactive 하게 만들어줌.

    이것이 하이드레이션 프로세스

* server side render 는 모든 컴포넌트에 발생한다.

* client에서 hydrate 되는 컴포넌트.. 클라이언트에서 interactive 하게 만들어질 컴포넌트는
    오직 use client 지시어를 가진 컴포넌트들 뿐이다.

* 'use client' 사용하면?

    이 component는 client에서 interactive 해야 해. 라고 알려주는 것임.

    따라서 초기 load 단계에서 next.js는 이 component를 render 할 것임.
    그리고 HTML을 사용자에게 주고 나서 이벤트리스너들을 추가할 컴포넌트를 hydrate 할 거임.
    ( use client를 상단에 적어 넣은 경우에만 발생!! )

    component가 interactive 하다면? useState 사용해야됨. 즉, "use client"; 적어줘야 함.

    "use client"는 오직 client 에서만 render 된다는 것을 의미하지 않는다.
    back-end에서 render 되고 front-end 에서 hydrate, interactive 됨을 의미한다.

* "use client" 를 선언하지 않으면 기본적으로 모두 server component 가 된다.

    use client components 도 server에서 먼저 render 되고 나서 hydrate 된다.

    server components는 server에서 먼저 render 되고, hydrate 는 되지 않음.
    정적이라는 의미인듯. 즉 JavaScript를 사용자가 적게 다운받아도 된다는 의미이다.

* 내가 프레임워크에게 어떤 component 가 interactive 해지고 어떤 component 가 그저 멍청하고
    지루한 HTML 이 될지 말해주면 그건 사용자가 다운로드 받을 JavaScript 의 양이 적어짐을 의미한다.

    클라이언트에 딱 한번만 랜더되고 다시는 랜더될 일이 없다면?
    어떠한 useState 나 onClick events 같은 것들이 없을 경우?
    그러면 사용자에게 그 server component를 위한 코드를 다운로드 받게 끔 할 필요가 있을까?
    필요 없쥬?
    그러면 페이지는 로딩 속도가 빨라지겠죠?
    이게 바로 server side rendering 인거시다.

    hydration 사용을 구분해주기 위해서 use client 를 적어주는 거고.

    서버 컴포넌트를 사용하는 것은 현명한 방법이다. 왜???
    서버 컴포넌트를 data fetching 을 할 때 엄청난 결과를 가져오기 때문!!!!

    서버 컴포넌트에서 데이터가 패치되는 것을 보면 분명히 기뻐할 것임
    일반 리액트 애플리케이션에서 데이터 패칭을 해온 방식과 비교해서요.
    (useQuery, React Query, swr, useState, useEffect ...
    데이터를 가져올 떄 이 녀석들 위주로 사용하는 건 끝났다고 할 수 있음. 곧 보게 될 것임!!!)

* 서버 구성 요소는 클라이언트 구성 요소를 직접적으로 가져올 수 없음. (import 안됨)

    - 단, 서버 구성 요소는 클라이언트 구성 요소로 Props로 전달 가능.
      아래는 사용 예시 코드이다. (app/page.tsx)

    // This pattern works:
    // You can pass a Server Component as a child or prop of a
    // Client Component.
    import ClientComponent from './client-component'
    import ServerComponent from './server-component'
    
    // Pages in Next.js are Server Components by default
    export default function Page() {
        return (
            <ClientComponent>
                <ServerComponent />
            </ClientComponent>
        )
    }

2.6 Recap (요약... 복습)

    next.js는 back-end에서 우리 application을 pre render 할 것임.
    모든 component를 가져가서 따분하고 non interactive한 HTML로 바꾸게 됨.
    그리고 그것을 사용자에게 줄 것임.
    사용자는 전달받은 HTML에서 프레임워크와 React.js를 initialize 할 것임.
    그리고 무슨 일이 발생하느냐? use client 명령어를 가진 컴포넌트가 hydrate 될 거임.
    hydrate는 interactive 된다는 뜻임.

    이젼 버젼들은 모든 component 가 hydrate 됐었음..

    그정 UI의 일종인 컴포넌트 라면? 정적으로 처리해도 되니까 interactive 할 필요가 없음.
    front-end 에서 hydrate 할 필요가 없겠죠.

    hydration은 우리가 받은 HTML의 위에서 React application을 실행해야 한다는 뜻이다.

    hydrate는 그냥 eventListeners 를 추가하고, interactive 하게 만드는 거임.
    그냥 어떠한 HTML을 실제 interactive한 React component로 바꾸는 것임.
    (onClick, setState, useState 등 이런 것들을 사용해서.)

    이 방식의 이점이란? 바로 사용자들이 다운로드 받아야 하는 자바스크립트 코드 양이 줄어든다는 것임!
    client component만 다루는 작은 자바스크립트를 다운로드 받게 됨.

    * use client는 client 에서만 render 한다는 의미가 아님!!
        client 에서도 render 된다는 의미이다!! (also client)

        - use client가 중요한 이유???
        
            어떤 컴포넌트가 하이드레이트 되는지, 즉 어떤 것이 인터랙티브를 필요로 하는지,
            어떤 것이 자바스크립트가 필요한지, 어떤 것이 불필요한지 등을 결정할 때 중요하다.

    * 모든 구성 요소들은 백앤드에서 먼저 랜더된다.

        클라이언트 컴포넌트던 서버컴포넌트던지 간에, 백앤드에서 먼저 서버 사이드 랜더로 pre-render 됨
        use client 명령어가 있든 없든 상관 없이. 백앤드에서 전부 pre-render 됨.


    클라이언트 컴포넌트 안에는 서버 컴포넌트를 가질 수 없음.
    use client를 사용하면 모든 children 이 client component 가 된다.
    (나중에 바뀔 수도 있음. 클라이언트 컴포넌트 안에 서버 컴포넌트를 넣는 말도 안되는 기능이 나올 수도 있음.)

    * 이것을 기억하자...

        - 모든 것이 서버사이드 랜더링 된다. 모든 것이 pre render 되어서 HTML로 변환된다.
            그 후에 client components 만이 hydrate 되고 interactive 하게 되는 것!!

        그러면 서버 컴포넌트는 코드가 서버에서만 실행된다?!
        오 그러면.. 여기서 DB와 통신 할 수 있게 된다. 이 코드는 서버에서만 실행되기 때문!
        여기서 API key를 사용해서 API를 fetch 한다고 하면 이 코드는 client로는 절대 가지 않기 때문에
        보안에 신경쓰지 않아도 되게 됨!!

        DB 통신을 해도 되고, 모든 API keys를 넣어도 상관없게 됨!! 멋진 일임.

        이제 서버 컴포넌트에서 data fetching 하는 법을 알아볼 것임.
        (client components 에서 data fetching 을 useState, useEffect를 이용하여 기존에 하던 것과 비교해서!)

        i' ll see u on the next one... (next time)

* Layouts

    about-us 페이지는 랜더링이 어떻게 될까?

    <RootLayout>
        <AboutUs/>
    </RootLayout>

    내가 가려는 페이지가 layout.tsx의 childeren prop 이 된다.

    - 폴더 별로 레이아웃 파일 생성 가능.

    해당 폴더 경로에 있는 페이지 파일을 감싸주는 레이아웃을 만들 수 있음.
    
    * 상위 폴더로 이동하여 레이아웃 파일을 확인하고,
      레이아웃 파일이 있는 경우에는 해당 레이아웃 파일을 사용하여 하위 항목을 랜더링 한다.

    레이아웃들이 서로 상쇄 된다고 생각하면 안됨!
    레이아웃은 중첩이 가능함! they get nested.

    - first of all, next.js taking the root layout.

        it is ready to render something.
        
        it checks the url, then go to the about-us folder.
        is there a layout file here?
        answer is yes.

        then...

        <Layout>
            <AboutUsLayout>
            </AboutUsLayout>
        </Layout>

        next url.. next folder..
        is there anything?
        nope..

        next... is there anything?
        nope..

        next folder .. sales.. is there anything? yes.

        Is there A layout there? no it isn't!

        okay, I'm going to render only the page.

        so then pages call sales.

        <Layout>
            <AboutUsLayout>
                <Sales />
            </AboutUsLayout>
        </Layout>

        Because we are nesting layouts!
        
        They don't cancel each other layout.

    레이아웃들은 서로 중첩된다.

    next js 는 url을 통해 폴더로 들어가서 레이아웃을 확인한다.
    그 레이아웃을 밖에 있는 다른레이아웃 안에 렌더링한다!! (inside of the other layout!)

    하위 레이아웃을 상위 레이아웃이 먹고.. 먹고.. 먹고...
    마지막으로 루트 레이아웃이 전부를 다 먹는 구조임.


        <Layout>
            <AboutUsLayout>
                <SalesLayout>
                    <Sales />
                </SalesLayout>
            </AboutUsLayout>
        </Layout>

    레이아웃이 상쇄된다고 생각하지 말자!!!
    레이아웃이 대체되는 것이 아님. 중첩되는 것임.

    가까운 레이아웃 부터 찾고 상위 경로 찾고 찾고 찾고 하는 식임.
    (parent.. parent.. parent.... root!)

    암튼 레이아웃이 중첩된다는 게 중요함!
    파일명이 layout으로 전부 같기 때문에 헷갈릴 수도 있겠구나..
    페이지도 마찬가지로 이름 다 똑같으니까 뭘 열어볼지 헷갈릴 수가 있겠네.

    아무튼 프레임워크가 알아서 다 해줄 거니까 저렇게 컴포넌트
    안에 컴포넌트 안에 컴포넌트 이제 명시해줄 필요 없음.

    app 폴더의 layout.tsx 파일은 app 폴더 내부의 모든 폴더와 페이지에서 사용됨.

* Metadata & Route groups

    - 라우터 그룹?

        라우터 그룹은 폴더 이름을 괄호로 묶어줘야 한다.
        (home) 이런 식으로.
        URL을 바꾸거나 하지 않게됨.

        (home), (movies) 이렇게 폴더명을 지정하면
        /home /movies 경로 인식 안하게 됨. url에 영향을 미치지 않게 된다.
        프레임워크가 그것을 무시하고 URL이나 어떠한 것도 수정하지 않을 거임.

    - 메타데이터?

        꼭 내보내야 하는 object 이고 메타데이터라고 부른다
        페이지의 head 부분에 위치하게 됨. SEO 에 도움이 되는 정보들이 담김.

        프레임워크가 코드를 호출하는 것임.
        무엇이든 입력해도 프레임워크는 메타데이터 객체를 찾고 head에 표시할거임.

        메타데이터도 중첩은 가능하지만 merged 된다. 병합됨.
        덮어씌우기 됨.

        home 에서만 메타데이터를 보여주게 할 수도 있음. (index 타이틀만.)

        메타데이터는 실제로는 중첩되지 않고 병합된다.

        - 메타데이터는 page, layout 에서만 가능.
            컴포넌트에서는 metadata를 내보낼 수 없고 또 metadata는 서버 컴포넌트에서만 있을 수 있음

        메타데이터를 분리하여 선언적으로 관리할 수 있다.

* Dynamic Routes

    ex) /moves/:id ----> <Movie /> (in react...)

    next.js에서는 파일 시스템을 사용함.

    (movies) 라는 라우터 그룹에 movies 폴더를 만들면
    /movies url을 선언해준 것과 같다.
    다만 /movies 자체는 못보게 하고 싶다?
    [id] 를 movies 폴더 밑에 넣으면 nest.js가 id 값 별로 해당 [id] 폴더를 참고하여 반영할 것임.

    - 대괄호를 넣지 않으면 not found 가 보이게 될 것임!

    * movies>[id]>page.tsx 참고

* Conclusions

    백앤드 서버에서 클라이언트, 서버컴포넌트 모두 랜더 된다.
    클라이언트 컴포넌트만 프론트앤드에서 다시 랜더링되거나 다시 Hydrate 된다.

    클라이언트 컴포넌트의 자바스크립트는 사용자가 다운로드하여 실행

    서버 컴포넌트의 자바스크립트는 사용자가 다운로드 하지 않음. 그럴 필요가 없기 때문.
    서버에 의해 한번만 실행됨.

    hydrate - interactive 되는 것.

    원하는 경우 클라이언트 컴포넌트를 서버 컴포넌트 내에 포함시킬 수 있음.
    다만 반대로 서버 컴포넌트를 클라이언트 컴포넌트에 포함시킬 수 없음.
    "use client" 를 쓰지 않는 이상 기본적으로 서버 컴포넌트임.


    * 레이아웃은 페이지에 뭔가를 감싸거나 둘러싸이게끔 넣고 싶을 때 사용되는 컴포넌트이다.

    * 메타데이터는 객체일 뿐이고 내보내주기만 하면 된다.
        메타데이터에는 템플릿도 있다. 똑같은 걸 반복하지 않아도 됨.
        또 메타데이터는 merged가 된다.

    * 또한 URL에 영향을 주지 않고 라우터를 그룹핑 할 수 있었다!
        (movies) 또는 (home) 이런 식으로 정리해주면 됨!

    * dynamic page

        [id] 또는 [name] 이런 식으로 폴더를 만들어줘서 사용하면 된다.
        next.js가 알아서 url에 있는 id 나 name 을 인식하여 page 컴포넌트를 호출해줌!

------------------------------------------------------

DATA FETCHING

    실습 데이터 references - nomad coders api

        Here are all the endpoints you can access
        /: This page
        /movies: List popular movies
        /movies/:id: Get movie by :id
        /movies/:id/credits: Get credits for a movie by :id
        /movies/:id/videos: Get videos for a movie by :id
        /movies/:id/providers: Get providers for a movie by :id
        /movies/:id/similar: Get similar movies for a movie by :id

    서버 컴포넌트로 data fetching 하는게 얼마나 멋진 일인지 알게 될 예정임

    https://nomad-movies.nomadcoders.workers.dev/


    * 메타데이터는 클라이언트 컴포넌트에서 사용할 수 없음.

* Server Side

    Server Component를 사용하면 fetch 된 url 을 캐싱시켜준다. (자동으로)

    백앤드 에서만 실행됨.

    물론 로딩 상태도 있음. 로딩 상태가 없는 것 처럼 보이지만,
    응답이 캐싱되었기 때문에 로딩이 없는 것처럼 보임.

    서버 껐다 키면 로딩 다시 확인 가능함.

    * 첫번째 fetch 만 api 에 요청한다. 나머지는 요청하지 않음.

        첫번째 요청에서 fetch된 캐싱된 데이터만 받는 거임.
        그 데이터는 메모리에서 가져오는 것임.

        아무튼 로딩 상태가 사라지지 않았다는 점을 기억하자.
        (첫번째 요청 상태가 느릴 수도 있음)


*   Loading Compoments

    loading.tsx 작성하면 로딩중에 해당 페이지 보여주게 됨.
    (페이지가 content 를 streaming 하기 때문임. 백앤드가 content를 streaming 하기 때문)

    next.js 기능이 있음. 사용자가 서버컴포넌트 로딩중 일 때 로딩.tsx 로 볼 수 있게 함.
    next.js는 fetch가 완료되면 브라우저에 결과 값을 보냄. (conneciton 이 살아있다고 생각하면 됨)

    next.js 가 하는 것은 웹사이트 일부를 천천히 보내는 것임.
    첫번째로 보내는 일부분은 layout이나 navigation이고 그 다음에 loading component 를 보내는거임
    마지막에 결과 값이 있는 페이지 컴포넌트를 보내고 로딩 컴포넌트와 교체해주게 된다.

    해당 페이지 컴포넌트가 async 여야 하는 이유는?
    Next.js 가 그 컴포넌트에서 await 해야 하기 때문임
    브라우저에게 백앤드에서 통신이 아직 마무리되지 않았고 기다려줘야 한다고 알려줘야 되기 때문에
    aysnc를 사용해야 한다. component 를 wait...
    await가 끝나면 브라우저에 마지막 HTML 부분을 전달해주는 것임.
    그러면 프레임워크가 loading component를 await된 component로 바꿔주는거임

    - 멋진 이유는 streaming 처럼 http를 사용하기 때문임.

        프레임워크가 우리의 페이지를 작은 HTML 부분으로 나누고,
        준비된 부분들을 하나씩 보여준다는 것임!

        (동시에 많은 것을 fetch 할 수도 있음. next.js는 그것들이 준비되면 브라우저에 보내줌.)

        마지막 부분을 주고 통신을 끝냄.

        * next.js 는 fetch 가 완료되면 로딩 컴포넌트와 교체하고 통신을 끝냄.

            사용자는 UI를 볼 때까지 기다릴 필요가 없고, 로딩 상태를 볼 수 있음.

            백앤드에서 데이터 패칭을 하면서 로딩 상태도 볼 수 있고, useState 같은 것 안써도 됨.
            그리고 로딩컴포넌트를 통신이 마무리되었을 때 프레임워크에서 자동으로 로딩된 화면으로 교체해줌

    이름 이름이 loading.tsx 이어야 한다.
    로딩 컴포넌트 사용하려면 page.tsx 랑 같은 경로에 두어야 한다.

* Parallel Requests

    const [movie, videos] = await Promise.all([getMovie(id), getVideos(id)])

    병렬적으로 fetch.. 둘다 동시에 가져오기 시작함.

    최적화의 한 방법. (순차적으로 불러오지 않아도 됨)

    단점: 다 끝나야 UI 를 볼 수 있음.

* Suspense

    리액트의 특징.. Next.js는 아니지만 병렬요청보다 더 멋지다고 함

    둘다 동시에 시작해서 먼저 되는 부분부터 UI 보여줄 수 있음

    Suspense는 리액트의 특징임. 리액트에서 가져와야함.

    suspense에는 fallback 이라는 prop이 있음
    이건 Component가 await 되는 동안 표시할 메세지를 render 할 수 있게 해준다.

    Suspense는 안에 있는 감싸진 컴포넌트를 await 한다.
    그리고 fetch 중에는 fallback 을 랜더링하다가 완료되면 실제 UI를 보여줄 것이다.

    다른 컴포넌트 로딩 기다릴 필요 없이 컴포넌트 로딩되면 그냥 바로 보여줌.

    page 파일에서 Suspense 사용했으면 await 하는게 없음.
    (suspense와 await는 분리되어 있음.)

    서스팬스 사용하면 로딩컴포넌트와 상관없이 페이지는 즉시 사용자에게 표시된다.

    Component 는 별도로 로딩됨.

    로딩파일이 전체페이지의 ui를 대체했었지만, 더 나은 suspense 최적화 덕분에
    페이지가 ui를 표시할 수 있었고 구체적으로 페이지의 어느 부분이 로딩 부분인지 Fallback을 통해
    표시할 수 있게 됐다. 전에는 페이지 전체가 로딩 상태였음.

    페이지를 바로 보여줄 수 있게 되었고, fetch 해야 하는 Component만 로딩 상태를 가지게 됐음.
    그리고 여전히 UseState나 useEffect를 쓰지 않았음.
    캐시와도 함께 사용할 수 있음. (Fetch를 사용했기 때문에 캐싱됐음. api에 다시 요청할 필요 없음.)

    아무튼 병렬적으로 api 요청을 할 수 있음.

    프로미스 올 사용하면 둘다 기다려야 했지만,
    서스펜스 사용하면 컴포넌트 별로 불러와지는 대로 사용자에게 보여줄 수 있음!!
    다른 컴포넌트 기다릴 필요가 없어서 멋지다고 함! next.js 사용하면 이게 다 공짜로 제공됨.
    페이지가 즉시 로딩될 수 있다는게 좋은 점. 데이터가 준비되면 사용자는 그 데이터를 받을거임.

    사용법??? 
    
        1. 서스펜스로 그 컴포넌트를 감싸기만 하면 됨.
        2. Fallback 처리해주면 됨.

        * Suspense와 page의 await는 분리되어 있음. 따라서 서스펜스 사용시 로딩 컴포넌트는 동작 x!
            페이지는 즉시 사용자에게 표시 된다!!

    => 병렬적으로 데이터 불러와지고, 서로 영향은 주지 않음.

        * 랜더링할 컴포넌트를 async 컴포넌트로 바꾸고 Suspense로 감싸주면 된다.

* Recap

    Next.js 프레임워크가
    page await... 로딩되는 동안 loading component가 page 파일의
    UI를 대체.

    2가지를 fetch 할 경우 Promise.all, Suspense 사용 가능.

    Promise.all 의 경우 두 Promise가 전부 끝날 때 까지 기다려야 함..
    가장 긴 요청만큼 시간이 걸리게됨.

    다른 최적화 방법인 React JS 의 Component 인 Suspense 를 사용할 수 있음.
    로딩 상태를 분리 할 수 있는게 장점임!

    page 파일에서 fetch를 다이렉트로 하는 경우, 
    데이터를 불러오는 동안 로딩 컴포넌트를 보여주게 됨.

    개발자 경험이 매우 좋구나 Next.js 가~
        isLoading이나 setIsLoading(true), setIsLoading(false)
        이런거 안해도 되니까.. 이런 것들과 작업하지 않아도 되니까.

* Error Handling

    불러오는 API와 연결이 끊기면 어떻게 될까? 어떻게 처리할까?

    error.tsx 만들자!
    해당 페이지에 에러가 있다고 해서 전체 어플리케이션이 다 죽으면 안됨.
    
    에러파일을 페이지 옆에다가 만들면 됨. 끝.
    (해당 페이지에만 에러가 적용됨.)

암튼 이젠 React.js에서 가져오고 오류를 처리하고 상태를 로드하는 것이 정말 쉬워졌다.
(보일러 플레이트 코드가 너무 많았는데.. 해결 많이 된듯?)

    thanks for being here..

------------------------------------------------------

DEPLOYMENT 할 차례...

    vercel 회원가입하라고 함

* CSS Modules

    style을 분리해서 css module를 만들 수 있다.

    navigation.module.css 처럼

    이름에 .module.css 를 갖고 있어야 한다. 이게 중요한 점임.
    (파일의 이름 자체는 중요하지 않음)

    자바스크립트 파일처럼 사용할 곳에서 import 해서 사용함.
    
    ex) import styles from "../styles/navigation.module.css";

        여기서 styles는 내 모듈 파일의 모든 classname 들을 보유한 
        javascript object 인 것처럼 인식한다고 상상하면 된다.
        (조금 이상하더라도..)

        ...

        <nav className={styles.nav}>

        ...

        아무튼 이런식으로 사용하면 class의 충돌은 없을 것임.
        css modules 의 장점 중 하나.

    일반적인 것은 global에 넣어야함.
    css modules 사용시 반드시 지정한 클래스명으로 시작해야함.
    styles.nav 면 .nav ul 로 써야함. ul 말고. 쌩 nav 도 안됨.
    아니면 클래스를 새로 만들고 그냥 또 사용하던지.

        ex) 
            .list {
                display: flex;
            }

            ...

            <ul className={styles.list}>

            .nav ul 로 쓰던 .list로 지정해서 className에 이어주던
            사용하는 사람이 선택할 수 있음.

    아무튼 따로 configuration... 따로 뭐 설정할 필요도 없이
    css_modules 동작함. 사용할 수 있음.



    

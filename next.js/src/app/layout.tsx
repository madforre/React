// "use client"; // 클라이언트 컴포넌트로 사용하고 싶은 경우 명시해줘야함.

import Link from "next/link";

import type { Metadata } from "next";
import "./globals.css"; // 전역적으로 디자인을 적용할 수 있는 위치.

// import { useEffect, useState } from "react"; // 서버 컴포넌트에서는 필요 없음. (사용 불가. 사용하려면 "use client";를 코드 상단에 명시해주어야 한다.)

export const metadata: Metadata = { // 메타는 서버 컴포넌틍님. 클라이언트 컴포넌트로 사용하려고 하면 에러가 발생하게 된다.
  title: "Web tutorials",
  description: "Generated by madforre",
};

export default async function RootLayout({ children, }: Readonly<{ children: React.ReactNode; }>) {
  
  // 클라이언트 컴포넌트였던 경우
  // const [topics, setTopics] = useState([]);
  // useEffect(() => {
  //   fetch('http://localhost:9999/topics')
  //     .then(res => res.json())
  //     .then(result => {
  //       setTopics(result);
  //     });
  // }, []);

  // 서버 컴포넌트로 변경 후
  const response = await fetch('http://localhost:9999/topics');
  const topics = await response.json();

  return (
    <html>
      <body>
        <h1><Link href="/">WEB</Link></h1>      
        <ol>
          {topics.map((topic: {id: string, title: string} )=> { // 목록을 동적으로 생성함.
            return <li key={topic.id}><Link href={`/read/${topic.id}`}>{topic.title}</Link></li>
          })}
        </ol>
        {/* 아래는 라우터 주소에 해당되는 children page을 리턴한다. */}
        {children}
        <ul>
          <li><Link href="/create">Create</Link></li>
          <li><Link href="/update/1">Update</Link></li>
          <li><input type="button" value="delete"/></li>
        </ul>
      </body>
    </html>
  );
}